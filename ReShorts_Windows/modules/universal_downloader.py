"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –±–µ–∑ API
–ü–æ–¥–¥–µ—Ä–∂–∫–∞: YouTube (yt-dlp), –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ Windows

–ê–≤—Ç–æ—Ä: MiniMax Agent
–î–∞—Ç–∞: 2025-10-17
"""

import logging
import os
import time
import requests
from typing import Dict, Any, Optional, List
from pathlib import Path, WindowsPath
import json
import hashlib
from urllib.parse import urlparse
import re

logger = logging.getLogger(__name__)


class UniversalDownloader:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –≤–∏–¥–µ–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.download_path = Path(config.get('download', {}).get('path', 'downloads'))
        self.max_retries = config.get('download', {}).get('max_retries', 3)
        self.timeout = config.get('download', {}).get('timeout', 60)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
        self.download_path.mkdir(parents=True, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤
        self.downloaders = []
        self._init_downloaders()
    
    def _init_downloaders(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤"""
        download_config = self.config.get('download', {})
        methods = download_config.get('methods', {})
        
        # yt-dlp (YouTube, TikTok –∏ –¥—Ä—É–≥–∏–µ)
        if methods.get('ytdlp', {}).get('enabled', True):
            try:
                from modules.downloaders.ytdlp_downloader import YTDLPDownloader
                downloader = YTDLPDownloader(self.config)
                self.downloaders.append(downloader)
                logger.info("‚úÖ yt-dlp –∑–∞–≥—Ä—É–∑—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è yt-dlp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # Requests (–ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏)
        if methods.get('requests', {}).get('enabled', True):
            try:
                from modules.downloaders.requests_downloader import RequestsDownloader
                downloader = RequestsDownloader(self.config)
                self.downloaders.append(downloader)
                logger.info("‚úÖ Requests –∑–∞–≥—Ä—É–∑—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Requests –∑–∞–≥—Ä—É–∑—á–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        if not self.downloaders:
            logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤!")
    
    def download(self, url: str, **kwargs) -> Dict[str, Any]:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏
        
        Args:
            url: URL –≤–∏–¥–µ–æ
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        """
        if not url:
            return {
                "success": False,
                "error": "URL –Ω–µ —É–∫–∞–∑–∞–Ω",
                "downloader": None
            }
        
        logger.info(f"üîΩ –ù–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {url}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        platform = self._detect_platform(url)
        logger.info(f"üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∏
        last_error = None
        for downloader in self.downloaders:
            if platform in downloader.supported_platforms or 'unknown' in downloader.supported_platforms:
                try:
                    logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ {downloader.name}")
                    result = downloader.download(url, **kwargs)
                    
                    if result.get('success'):
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ {downloader.name}")
                        result['downloader'] = downloader.name
                        result['platform'] = platform
                        return result
                    else:
                        last_error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                        logger.warning(f"‚ö†Ô∏è {downloader.name}: {last_error}")
                        
                except Exception as e:
                    last_error = str(e)
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {downloader.name}: {e}")
                    continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}"
        logger.error(f"‚ùå {error_msg}")
        
        return {
            "success": False,
            "error": error_msg,
            "url": url,
            "platform": platform,
            "downloader": None
        }
    
    def _detect_platform(self, url: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ URL"""
        url_lower = url.lower()
        
        if 'youtube.com' in url_lower or 'youtu.be' in url_lower:
            return 'youtube'
        elif 'tiktok.com' in url_lower:
            return 'tiktok'
        elif 'instagram.com' in url_lower:
            return 'instagram'
        elif 'facebook.com' in url_lower or 'fb.watch' in url_lower:
            return 'facebook'
        elif 'twitter.com' in url_lower or 'x.com' in url_lower:
            return 'twitter'
        else:
            return 'unknown'
    
    def get_download_info(self, url: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        
        Args:
            url: URL –≤–∏–¥–µ–æ
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ
        """
        for downloader in self.downloaders:
            if hasattr(downloader, 'get_info'):
                try:
                    info = downloader.get_info(url)
                    if info.get('success'):
                        return info
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ {downloader.name}: {e}")
                    continue
        
        return {
            "success": False,
            "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ"
        }
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤"""
        status = {}
        
        for downloader in self.downloaders:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
                if hasattr(downloader, 'check_status'):
                    downloader_status = downloader.check_status()
                else:
                    downloader_status = {"available": True, "error": None}
                
                status[downloader.name] = {
                    "available": downloader_status.get('available', True),
                    "error": downloader_status.get('error'),
                    "supported_platforms": downloader.supported_platforms
                }
                
            except Exception as e:
                status[downloader.name] = {
                    "available": False,
                    "error": str(e),
                    "supported_platforms": getattr(downloader, 'supported_platforms', [])
                }
        
        return status
    
    def cleanup_downloads(self, older_than_days: int = 7) -> Dict[str, Any]:
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        
        Args:
            older_than_days: –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏
        """
        try:
            deleted_count = 0
            deleted_size = 0
            cutoff_time = time.time() - (older_than_days * 24 * 60 * 60)
            
            for file_path in self.download_path.iterdir():
                if file_path.is_file():
                    file_stat = file_path.stat()
                    if file_stat.st_mtime < cutoff_time:
                        file_size = file_stat.st_size
                        file_path.unlink()
                        deleted_count += 1
                        deleted_size += file_size
                        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file_path.name}")
            
            return {
                "success": True,
                "deleted_count": deleted_count,
                "deleted_size": deleted_size,
                "message": f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ñ–∞–π–ª–æ–≤ ({deleted_size / 1024 / 1024:.1f} MB)"
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return {
                "success": False,
                "error": error_msg
            }


def sanitize_filename(filename: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è Windows"""
    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Windows
    invalid_chars = '<>:"/\\|?*'
    for char in invalid_chars:
        filename = filename.replace(char, '_')
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    if len(filename) > 200:
        name, ext = os.path.splitext(filename)
        filename = name[:200-len(ext)] + ext
    
    return filename.strip()


def get_file_hash(file_path: Path) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    hash_md5 = hashlib.md5()
    try:
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()
    except Exception:
        return ""