/**
 * ReShorts Windows - JavaScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 * –ê–≤—Ç–æ—Ä: MiniMax Agent
 * –î–∞—Ç–∞: 2025-10-17
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentPage = 'dashboard';
let stats = {};
let config = {};
let selectedVideos = [];
let chartInstance = null;

// –ë–∞–∑–æ–≤—ã–π URL API
const API_BASE = '/api';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ ReShorts Windows - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞');
    
    initializeNavigation();
    initializeEventListeners();
    checkBackendStatus();
    loadInitialData();
    showPage('dashboard');
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    setInterval(checkBackendStatus, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
});

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
function initializeNavigation() {
    const navItems = document.querySelectorAll('.nav-item');
    
    navItems.forEach(item => {
        item.addEventListener('click', function() {
            const page = this.getAttribute('data-page');
            showPage(page);
        });
    });
}

function showPage(pageId) {
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.querySelectorAll('.page').forEach(page => {
        page.classList.remove('active');
    });
    
    // –£–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const targetPage = document.getElementById(pageId);
    const targetNavItem = document.querySelector(`[data-page="${pageId}"]`);
    
    if (targetPage && targetNavItem) {
        targetPage.classList.add('active');
        targetNavItem.classList.add('active');
        currentPage = pageId;
        
        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        loadPageData(pageId);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initializeEventListeners() {
    // –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞
    const searchForm = document.getElementById('search-form');
    if (searchForm) {
        searchForm.addEventListener('submit', handleSearch);
    }
    
    // –§–æ—Ä–º–∞ –∞–Ω–∞–ª–∏–∑–∞
    const analyzeForm = document.getElementById('analyze-form');
    if (analyzeForm) {
        analyzeForm.addEventListener('submit', handleAnalyze);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    const refreshFilesBtn = document.getElementById('refresh-files-btn');
    if (refreshFilesBtn) {
        refreshFilesBtn.addEventListener('click', loadFiles);
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ Escape
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeModal();
        }
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ backend
async function checkBackendStatus() {
    try {
        const response = await fetch(`${API_BASE}/stats`);
        const statusDot = document.getElementById('backend-status');
        const statusText = document.getElementById('backend-status-text');
        
        if (response.ok) {
            statusDot.className = 'status-dot online';
            statusText.textContent = 'Backend –∞–∫—Ç–∏–≤–µ–Ω';
        } else {
            throw new Error('Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    } catch (error) {
        const statusDot = document.getElementById('backend-status');
        const statusText = document.getElementById('backend-status-text');
        
        statusDot.className = 'status-dot';
        statusText.textContent = 'Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadInitialData() {
    try {
        await loadStats();
        await loadConfig();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function loadPageData(pageId) {
    try {
        switch (pageId) {
            case 'dashboard':
                await loadStats();
                updateActivityChart();
                break;
            case 'files':
                await loadFiles();
                break;
            case 'settings':
                await loadConfig();
                updateSettingsForm();
                break;
            case 'status':
                await loadSystemStatus();
                break;
            case 'analyze':
                await checkAIProviders();
                break;
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageId}:`, error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadStats() {
    try {
        const response = await fetch(`${API_BASE}/stats`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        
        const data = await response.json();
        if (data.status === 'success') {
            stats = data.data;
            updateStatsDisplay();
            updateRecentOperations();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 'error');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatsDisplay() {
    document.getElementById('stat-downloaded').textContent = stats.downloaded || 0;
    document.getElementById('stat-analyzed').textContent = stats.analyzed || 0;
    document.getElementById('stat-processed').textContent = stats.processed || 0;
    document.getElementById('stat-success').textContent = `${stats.success_rate || 0}%`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
function updateRecentOperations() {
    const container = document.getElementById('recent-operations');
    const operations = stats.recent_operations || [];
    
    if (operations.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üìã</div>
                <p>–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π</p>
                <small>–û–ø–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</small>
            </div>
        `;
        return;
    }
    
    container.innerHTML = operations.map(operation => `
        <div class="operation-item">
            <div class="operation-icon">${getOperationIcon(operation.type)}</div>
            <div class="operation-info">
                <div class="operation-description">${operation.description}</div>
                <div class="operation-time">${formatTimestamp(operation.timestamp)}</div>
            </div>
        </div>
    `).join('');
}

function getOperationIcon(type) {
    const icons = {
        'search': 'üîç',
        'download': 'üì•',
        'analyze': 'ü§ñ',
        'process': '‚úÇÔ∏è'
    };
    return icons[type] || 'üìã';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function updateActivityChart() {
    const canvas = document.getElementById('activityChart');
    if (!canvas || !stats.chart_data) return;
    
    const ctx = canvas.getContext('2d');
    const chartData = stats.chart_data;
    
    // –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ (–±–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫)
    drawSimpleChart(ctx, chartData);
}

function drawSimpleChart(ctx, data) {
    const canvas = ctx.canvas;
    const width = canvas.width;
    const height = canvas.height;
    
    // –û—á–∏—Å—Ç–∫–∞ –∫–∞–Ω–≤–∞—Å–∞
    ctx.clearRect(0, 0, width, height);
    
    if (!data || data.length === 0) return;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    const padding = 40;
    const chartWidth = width - padding * 2;
    const chartHeight = height - padding * 2;
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const maxValue = Math.max(...data.map(d => d.total)) || 1;
    
    // –†–∏—Å–æ–≤–∞–Ω–∏–µ –æ—Å–µ–π
    ctx.strokeStyle = '#334155';
    ctx.lineWidth = 1;
    
    // –û—Å—å X
    ctx.beginPath();
    ctx.moveTo(padding, height - padding);
    ctx.lineTo(width - padding, height - padding);
    ctx.stroke();
    
    // –û—Å—å Y
    ctx.beginPath();
    ctx.moveTo(padding, padding);
    ctx.lineTo(padding, height - padding);
    ctx.stroke();
    
    // –†–∏—Å–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const barWidth = chartWidth / data.length - 10;
    
    data.forEach((item, index) => {
        const x = padding + (index * (chartWidth / data.length)) + 5;
        const barHeight = (item.total / maxValue) * chartHeight;
        const y = height - padding - barHeight;
        
        // –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞
        const gradient = ctx.createLinearGradient(0, y, 0, height - padding);
        gradient.addColorStop(0, '#06B6D4');
        gradient.addColorStop(1, '#0891B2');
        
        ctx.fillStyle = gradient;
        ctx.fillRect(x, y, barWidth, barHeight);
        
        // –ü–æ–¥–ø–∏—Å—å –¥–∞—Ç—ã
        ctx.fillStyle = '#64748B';
        ctx.font = '10px Segoe UI';
        ctx.textAlign = 'center';
        const shortDate = new Date(item.date).toLocaleDateString('ru', { day: '2-digit', month: '2-digit' });
        ctx.fillText(shortDate, x + barWidth / 2, height - padding + 15);
        
        // –ó–Ω–∞—á–µ–Ω–∏–µ
        if (item.total > 0) {
            ctx.fillStyle = '#F8FAFC';
            ctx.font = '12px Segoe UI';
            ctx.fillText(item.total.toString(), x + barWidth / 2, y - 5);
        }
    });
}

// –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ
async function handleSearch(event) {
    event.preventDefault();
    
    const btn = document.getElementById('search-btn');
    const formData = new FormData(event.target);
    const searchParams = Object.fromEntries(formData.entries());
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!searchParams.query.trim()) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', 'warning');
        return;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    btn.classList.add('loading');
    btn.disabled = true;
    
    try {
        const response = await fetch(`${API_BASE}/search`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(searchParams)
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            displaySearchResults(data.data, data.count);
            showNotification(`–ù–∞–π–¥–µ–Ω–æ ${data.count} –≤–∏–¥–µ–æ`, 'success');
        } else {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        showNotification(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`, 'error');
    } finally {
        btn.classList.remove('loading');
        btn.disabled = false;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
function displaySearchResults(videos, count) {
    const resultsContainer = document.getElementById('search-results');
    const videosGrid = document.getElementById('videos-grid');
    const resultsCount = document.getElementById('results-count');
    
    resultsCount.textContent = `(${count})`;
    
    if (videos.length === 0) {
        videosGrid.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üîç</div>
                <p>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
                <small>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</small>
            </div>
        `;
    } else {
        videosGrid.innerHTML = videos.map(video => createVideoCard(video)).join('');
    }
    
    resultsContainer.style.display = 'block';
    selectedVideos = [];
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–∏–¥–µ–æ
function createVideoCard(video) {
    const viralScoreClass = getViralScoreClass(video.viral_score);
    const duration = formatDuration(video.duration);
    const views = formatNumber(video.views);
    const likes = formatNumber(video.likes);
    
    return `
        <div class="video-card" data-video-id="${video.id}">
            <input type="checkbox" class="video-select" onchange="toggleVideoSelection('${video.id}')">
            <div class="video-thumbnail">
                <img src="${video.thumbnail}" alt="${video.title}" loading="lazy">
                <div class="video-duration">${duration}</div>
                <div class="video-platform">${video.platform}</div>
            </div>
            <div class="video-info">
                <div class="video-title">${video.title}</div>
                <div class="video-channel">${video.channel || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'}</div>
                <div class="video-stats">
                    <span>üëÅÔ∏è ${views}</span>
                    <span>‚ù§Ô∏è ${likes}</span>
                    <span class="viral-score ${viralScoreClass}">
                        üî• ${video.viral_score}
                    </span>
                </div>
                <div class="video-actions">
                    <button class="btn btn-primary btn-sm" onclick="downloadVideo('${video.url}', '${video.title}')">
                        üì• –°–∫–∞—á–∞—Ç—å
                    </button>
                    <button class="btn btn-secondary btn-sm" onclick="analyzeVideo(${JSON.stringify(video).replace(/"/g, '&quot;')})">
                        ü§ñ –ê–Ω–∞–ª–∏–∑
                    </button>
                </div>
            </div>
        </div>
    `;
}

function getViralScoreClass(score) {
    if (score >= 8) return 'score-high';
    if (score >= 5) return 'score-medium';
    return 'score-low';
}

function formatDuration(seconds) {
    if (!seconds) return '0:00';
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
}

function formatNumber(num) {
    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;
    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;
    return num.toString();
}

function formatTimestamp(timestamp) {
    return new Date(timestamp).toLocaleString('ru');
}

// –í—ã–±–æ—Ä –≤–∏–¥–µ–æ
function toggleVideoSelection(videoId) {
    const index = selectedVideos.indexOf(videoId);
    const card = document.querySelector(`[data-video-id="${videoId}"]`);
    
    if (index > -1) {
        selectedVideos.splice(index, 1);
        card.classList.remove('selected');
    } else {
        selectedVideos.push(videoId);
        card.classList.add('selected');
    }
    
    updateSelectionUI();
}

function selectAllVideos() {
    const checkboxes = document.querySelectorAll('.video-select');
    const allSelected = selectedVideos.length === checkboxes.length;
    
    checkboxes.forEach(checkbox => {
        const videoId = checkbox.closest('.video-card').dataset.videoId;
        const card = checkbox.closest('.video-card');
        
        if (allSelected) {
            checkbox.checked = false;
            card.classList.remove('selected');
        } else {
            checkbox.checked = true;
            card.classList.add('selected');
        }
    });
    
    if (allSelected) {
        selectedVideos = [];
    } else {
        selectedVideos = Array.from(checkboxes).map(cb => 
            cb.closest('.video-card').dataset.videoId
        );
    }
    
    updateSelectionUI();
}

function updateSelectionUI() {
    const button = document.querySelector('[onclick="selectAllVideos()"]');
    if (button) {
        button.textContent = selectedVideos.length > 0 ? '‚ùå –°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ' : '‚òëÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Å–µ';
    }
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
async function downloadVideo(url, title) {
    try {
        showNotification(`–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${title}`, 'info');
        
        const response = await fetch(`${API_BASE}/download`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ url })
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            showNotification(`–£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: ${title}`, 'success');
            loadStats(); // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        } else {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
        showNotification(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${error.message}`, 'error');
    }
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
async function downloadSelected() {
    if (selectedVideos.length === 0) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è', 'warning');
        return;
    }
    
    showNotification(`–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ ${selectedVideos.length} –≤–∏–¥–µ–æ`, 'info');
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    for (const videoId of selectedVideos) {
        const card = document.querySelector(`[data-video-id="${videoId}"]`);
        const url = card.querySelector('.video-actions .btn-primary').getAttribute('onclick').match(/'([^']+)'/)[1];
        const title = card.querySelector('.video-title').textContent;
        
        await downloadVideo(url, title);
        await new Promise(resolve => setTimeout(resolve, 1000)); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏
    }
}

// AI –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ
async function handleAnalyze(event) {
    event.preventDefault();
    
    const btn = document.getElementById('analyze-btn');
    const formData = new FormData(event.target);
    const videoData = formData.get('video_data');
    const prompt = formData.get('prompt');
    
    if (!videoData.trim()) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞', 'warning');
        return;
    }
    
    btn.classList.add('loading');
    btn.disabled = true;
    
    try {
        const response = await fetch(`${API_BASE}/analyze`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                video_data: videoData,
                prompt: prompt
            })
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            displayAnalysisResult(data.data);
            showNotification('–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
        } else {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
        showNotification(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`, 'error');
    } finally {
        btn.classList.remove('loading');
        btn.disabled = false;
    }
}

function analyzeVideo(videoData) {
    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–Ω–∞–ª–∏–∑–∞
    showPage('analyze');
    
    // –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –≤–∏–¥–µ–æ
    const videoDataField = document.getElementById('video_data');
    videoDataField.value = JSON.stringify(videoData, null, 2);
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–∫—É—Å
    videoDataField.focus();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
function displayAnalysisResult(result) {
    const container = document.getElementById('analyze-result');
    const output = document.getElementById('analyze-output');
    
    let html = `
        <div class="analysis-header">
            <h4>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞</h4>
            <div class="analysis-meta">
                <span>ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${result.provider}</span>
                <span>‚è∞ ${formatTimestamp(result.timestamp)}</span>
            </div>
        </div>
    `;
    
    if (result.structured_data) {
        const data = result.structured_data;
        
        html += `
            <div class="analysis-scores">
                <div class="score-item">
                    <div class="score-label">–í–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª</div>
                    <div class="score-value score-${getScoreClass(data.viral_potential)}">${data.viral_potential}/10</div>
                </div>
        `;
        
        if (data.trend_relevance) {
            html += `
                <div class="score-item">
                    <div class="score-label">–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å</div>
                    <div class="score-value score-${getScoreClass(data.trend_relevance)}">${data.trend_relevance}/10</div>
                </div>
            `;
        }
        
        html += '</div>';
        
        // –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        if (data.key_factors && data.key_factors.length > 0) {
            html += `
                <div class="analysis-section">
                    <h5>‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞</h5>
                    <ul class="analysis-list">
                        ${data.key_factors.map(factor => `<li>${factor}</li>`).join('')}
                    </ul>
                </div>
            `;
        }
        
        // –°–ª–∞–±—ã–µ –º–µ—Å—Ç–∞
        if (data.weaknesses && data.weaknesses.length > 0) {
            html += `
                <div class="analysis-section">
                    <h5>‚ö†Ô∏è –°–ª–∞–±—ã–µ –º–µ—Å—Ç–∞</h5>
                    <ul class="analysis-list">
                        ${data.weaknesses.map(weakness => `<li>${weakness}</li>`).join('')}
                    </ul>
                </div>
            `;
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (data.recommendations && data.recommendations.length > 0) {
            html += `
                <div class="analysis-section">
                    <h5>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h5>
                    <ul class="analysis-list">
                        ${data.recommendations.map(rec => `<li>${rec}</li>`).join('')}
                    </ul>
                </div>
            `;
        }
    }
    
    html += `
        <div class="analysis-section">
            <h5>üìù –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑</h5>
            <div class="analysis-text">${result.analysis.replace(/\n/g, '<br>')}</div>
        </div>
    `;
    
    output.innerHTML = html;
    container.style.display = 'block';
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    container.scrollIntoView({ behavior: 'smooth' });
}

function getScoreClass(score) {
    if (score >= 8) return 'high';
    if (score >= 5) return 'medium';
    return 'low';
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
async function loadFiles() {
    const container = document.getElementById('files-list');
    
    try {
        container.innerHTML = `
            <div class="loading-state">
                <div class="spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...</p>
            </div>
        `;
        
        const response = await fetch(`${API_BASE}/files`);
        const data = await response.json();
        
        if (data.status === 'success') {
            displayFiles(data.data);
        } else {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:', error);
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">‚ùå</div>
                <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤</p>
                <small>${error.message}</small>
            </div>
        `;
    }
}

function displayFiles(files) {
    const container = document.getElementById('files-list');
    
    if (files.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üìÅ</div>
                <p>–ù–µ—Ç —Ñ–∞–π–ª–æ–≤</p>
                <small>–°–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</small>
            </div>
        `;
        return;
    }
    
    container.innerHTML = files.map(file => `
        <div class="file-item">
            <div class="file-icon">üé¨</div>
            <div class="file-info">
                <div class="file-name">${file.name}</div>
                <div class="file-meta">
                    ${formatFileSize(file.size)} ‚Ä¢ ${formatTimestamp(file.created)}
                </div>
            </div>
            <div class="file-actions">
                <button class="btn btn-secondary btn-sm" onclick="analyzeFile('${file.path}', '${file.name}')">
                    ü§ñ –ê–Ω–∞–ª–∏–∑
                </button>
                <button class="btn btn-secondary btn-sm" onclick="deleteFile('${file.path}', '${file.name}')">
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        </div>
    `).join('');
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function loadConfig() {
    try {
        const response = await fetch(`${API_BASE}/config`);
        const data = await response.json();
        
        if (data.status === 'success') {
            config = data.data;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
function updateSettingsForm() {
    if (!config) return;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
    const searchConfig = config.search || {};
    setValue('config-max-results', searchConfig.max_results || 10);
    setValue('config-date-range', searchConfig.date_range || 'all');
    setValue('config-min-views', searchConfig.min_views || 1000);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI
    const aiConfig = config.ai || {};
    setValue('config-ai-timeout', aiConfig.timeout || 30);
    setValue('config-ai-retries', aiConfig.max_retries || 3);
    setChecked('config-ai-cache', aiConfig.cache_enabled !== false);
    
    const providers = aiConfig.providers || {};
    setValue('config-gpt4free-priority', providers.gpt4free?.priority || 1);
    setValue('config-gemini-priority', providers.gemini?.priority || 2);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    const downloadConfig = config.download || {};
    setValue('config-video-quality', downloadConfig.video_quality || 'best');
    setValue('config-max-file-size', downloadConfig.max_file_size || 100);
    setValue('config-download-retries', downloadConfig.max_retries || 3);
    setChecked('config-download-thumbnails', downloadConfig.thumbnail !== false);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
    const autoConfig = config.automation || {};
    setChecked('config-auto-search', autoConfig.auto_search === true);
    setChecked('config-auto-download', autoConfig.auto_download === true);
    setChecked('config-auto-analyze', autoConfig.auto_analyze === true);
    setValue('config-auto-interval', autoConfig.auto_run_interval || 60);
    setValue('config-daily-limit', autoConfig.max_daily_downloads || 50);
}

function setValue(id, value) {
    const element = document.getElementById(id);
    if (element) element.value = value;
}

function setChecked(id, checked) {
    const element = document.getElementById(id);
    if (element) element.checked = checked;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function saveSettings() {
    try {
        const newConfig = {
            search: {
                max_results: parseInt(getValue('config-max-results')) || 10,
                date_range: getValue('config-date-range') || 'all',
                min_views: parseInt(getValue('config-min-views')) || 1000
            },
            ai: {
                timeout: parseInt(getValue('config-ai-timeout')) || 30,
                max_retries: parseInt(getValue('config-ai-retries')) || 3,
                cache_enabled: getChecked('config-ai-cache'),
                providers: {
                    gpt4free: {
                        enabled: true,
                        priority: parseInt(getValue('config-gpt4free-priority')) || 1
                    },
                    gemini: {
                        enabled: true,
                        priority: parseInt(getValue('config-gemini-priority')) || 2
                    }
                }
            },
            download: {
                video_quality: getValue('config-video-quality') || 'best',
                max_file_size: parseInt(getValue('config-max-file-size')) || 100,
                max_retries: parseInt(getValue('config-download-retries')) || 3,
                thumbnail: getChecked('config-download-thumbnails')
            },
            automation: {
                auto_search: getChecked('config-auto-search'),
                auto_download: getChecked('config-auto-download'),
                auto_analyze: getChecked('config-auto-analyze'),
                auto_run_interval: parseInt(getValue('config-auto-interval')) || 60,
                max_daily_downloads: parseInt(getValue('config-daily-limit')) || 50
            }
        };
        
        const response = await fetch(`${API_BASE}/config`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(newConfig)
        });
        
        const data = await response.json();
        
        if (data.status === 'success') {
            config = newConfig;
            showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
        } else {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        showNotification(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`, 'error');
    }
}

function getValue(id) {
    const element = document.getElementById(id);
    return element ? element.value : '';
}

function getChecked(id) {
    const element = document.getElementById(id);
    return element ? element.checked : false;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
async function loadSystemStatus() {
    try {
        const response = await fetch(`${API_BASE}/system-status`);
        const data = await response.json();
        
        if (data.status === 'success') {
            displaySystemStatus(data.data);
        } else {
            throw new Error(data.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã:', error);
        displaySystemError(error.message);
    }
}

function displaySystemStatus(status) {
    // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (status.system) {
        updateSystemInfo(status.system);
    }
    
    // –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤
    if (status.downloaders) {
        updateDownloadersStatus(status.downloaders);
    }
    
    // –°—Ç–∞—Ç—É—Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    if (status.ai_providers) {
        updateAIProvidersStatus(status.ai_providers);
    }
}

function updateSystemInfo(system) {
    const container = document.getElementById('system-info');
    
    container.innerHTML = `
        <div class="status-item">
            <div class="status-name">CPU</div>
            <div class="status-value">
                <span class="status-dot ${system.cpu_percent < 80 ? 'online' : ''}"></span>
                ${system.cpu_percent.toFixed(1)}%
            </div>
        </div>
        <div class="status-item">
            <div class="status-name">–ü–∞–º—è—Ç—å</div>
            <div class="status-value">
                <span class="status-dot ${system.memory_percent < 80 ? 'online' : ''}"></span>
                ${system.memory_percent.toFixed(1)}%
            </div>
        </div>
        <div class="status-item">
            <div class="status-name">–î–∏—Å–∫</div>
            <div class="status-value">
                <span class="status-dot ${system.disk_percent < 90 ? 'online' : ''}"></span>
                ${system.disk_percent.toFixed(1)}%
            </div>
        </div>
    `;
}

function updateDownloadersStatus(downloaders) {
    const container = document.getElementById('downloaders-status');
    
    container.innerHTML = Object.entries(downloaders).map(([name, status]) => `
        <div class="status-item">
            <div class="status-name">${name}</div>
            <div class="status-value">
                <span class="status-dot ${status.available ? 'online' : ''}"></span>
                ${status.available ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
            </div>
        </div>
    `).join('');
}

function updateAIProvidersStatus(providers) {
    const container = document.getElementById('ai-providers-status');
    
    container.innerHTML = Object.entries(providers).map(([name, status]) => `
        <div class="status-item">
            <div class="status-name">${name}</div>
            <div class="status-value">
                <span class="status-dot ${status.available ? 'online' : ''}"></span>
                ${status.available ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
                ${status.mode ? `(${status.mode})` : ''}
            </div>
        </div>
    `).join('');
}

function displaySystemError(message) {
    const containers = ['system-info', 'downloaders-status', 'ai-providers-status'];
    
    containers.forEach(id => {
        const container = document.getElementById(id);
        if (container) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">‚ùå</div>
                    <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p>
                    <small>${message}</small>
                </div>
            `;
        }
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
async function checkAIProviders() {
    try {
        const response = await fetch(`${API_BASE}/system-status`);
        const data = await response.json();
        
        if (data.status === 'success' && data.data.ai_providers) {
            const providerStatus = document.getElementById('ai-provider-status');
            const providers = data.data.ai_providers;
            
            const available = Object.values(providers).filter(p => p.available).length;
            const total = Object.keys(providers).length;
            
            if (available > 0) {
                providerStatus.innerHTML = `
                    <span class="status-dot online"></span>
                    <span>–î–æ—Å—Ç—É–ø–Ω–æ ${available}/${total} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤</span>
                `;
            } else {
                providerStatus.innerHTML = `
                    <span class="status-dot"></span>
                    <span>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤</span>
                `;
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:', error);
    }
}

// –£—Ç–∏–ª–∏—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function refreshDashboard() {
    loadStats();
    showNotification('Dashboard –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
}

function resetSearchForm() {
    const form = document.getElementById('search-form');
    if (form) {
        form.reset();
        document.getElementById('search-results').style.display = 'none';
        selectedVideos = [];
    }
}

function clearAnalyzeForm() {
    const form = document.getElementById('analyze-form');
    if (form) {
        form.reset();
        document.getElementById('analyze-result').style.display = 'none';
    }
}

function refreshSystemStatus() {
    loadSystemStatus();
    showNotification('–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function showModal(modalId) {
    document.getElementById('modal-overlay').style.display = 'block';
    document.getElementById(modalId).style.display = 'block';
}

function closeModal() {
    document.getElementById('modal-overlay').style.display = 'none';
    document.querySelectorAll('.modal').forEach(modal => {
        modal.style.display = 'none';
    });
}

function showConfirm(title, message, callback) {
    document.getElementById('confirm-title').textContent = title;
    document.getElementById('confirm-message').textContent = message;
    document.getElementById('confirm-action').onclick = () => {
        closeModal();
        callback();
    };
    showModal('confirm-modal');
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info') {
    const notifications = document.getElementById('notifications');
    const notification = document.createElement('div');
    
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <div class="notification-icon">${getNotificationIcon(type)}</div>
        <div class="notification-message">${message}</div>
    `;
    
    notifications.appendChild(notification);
    
    // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 5000);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∏–∫—É
    notification.addEventListener('click', () => {
        notification.remove();
    });
}

function getNotificationIcon(type) {
    const icons = {
        'success': '‚úÖ',
        'error': '‚ùå',
        'warning': '‚ö†Ô∏è',
        'info': '‚ÑπÔ∏è'
    };
    return icons[type] || '‚ÑπÔ∏è';
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function analyzeFile(path, name) {
    showPage('analyze');
    const videoDataField = document.getElementById('video_data');
    videoDataField.value = JSON.stringify({
        title: name,
        file_path: path,
        description: `–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${name}`
    }, null, 2);
}

function deleteFile(path, name) {
    showConfirm(
        '–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞',
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª "${name}"?`,
        () => {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            showNotification(`–§–∞–π–ª "${name}" —É–¥–∞–ª–µ–Ω`, 'success');
            loadFiles();
        }
    );
}

function clearOperations() {
    showConfirm(
        '–û—á–∏—Å—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π',
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π?',
        () => {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É
            showNotification('–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –æ—á–∏—â–µ–Ω', 'success');
            loadStats();
        }
    );
}

function cleanupFiles() {
    showConfirm(
        '–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤',
        '–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π?',
        () => {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
            showNotification('–°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã', 'success');
            loadFiles();
        }
    );
}

function copyAnalysis() {
    const analysisText = document.getElementById('analyze-output').textContent;
    if (navigator.clipboard) {
        navigator.clipboard.writeText(analysisText);
        showNotification('–ê–Ω–∞–ª–∏–∑ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
    }
}

function saveAnalysis() {
    const analysisText = document.getElementById('analyze-output').textContent;
    const blob = new Blob([analysisText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = `analysis_${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    showNotification('–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'success');
}

function resetSettings() {
    showConfirm(
        '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫',
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?',
        () => {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
            showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã', 'success');
            loadConfig();
            updateSettingsForm();
        }
    );
}

function exportSettings() {
    const blob = new Blob([JSON.stringify(config, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = `reshorts_settings_${Date.now()}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
}

function importSettings() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    
    input.onchange = function(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const importedConfig = JSON.parse(e.target.result);
                    config = importedConfig;
                    updateSettingsForm();
                    showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
                } catch (error) {
                    showNotification('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
                }
            };
            reader.readAsText(file);
        }
    };
    
    input.click();
}

function clearCache() {
    showConfirm(
        '–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞',
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à?',
        () => {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –∫–µ—à–∞
            showNotification('–ö–µ—à –æ—á–∏—â–µ–Ω', 'success');
        }
    );
}

function restartServices() {
    showConfirm(
        '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±',
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—ã?',
        () => {
            showNotification('–°–ª—É–∂–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è...', 'info');
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        }
    );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', function(event) {
    console.error('‚ùå JavaScript –æ—à–∏–±–∫–∞:', event.error);
    showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞', 'error');
});

window.addEventListener('unhandledrejection', function(event) {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', event.reason);
    showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
});

console.log('‚úÖ ReShorts Windows JavaScript –∑–∞–≥—Ä—É–∂–µ–Ω');