"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AI-–º–æ–¥—É–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: GPT4Free, OpenRouter, Google Gemini, LocalAI
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
"""

import logging
import json
import time
from typing import Optional, Dict, Any, List

logger = logging.getLogger(__name__)


class AIProviderManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.providers = []
        self.current_provider_index = 0
        self.cache = {} if config.get('ai', {}).get('cache_enabled', True) else None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        self._init_providers()
        
    def _init_providers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        ai_config = self.config.get('ai', {})
        providers_config = ai_config.get('providers', {})
        
        # GPT4Free
        if providers_config.get('gpt4free', {}).get('enabled', True):
            try:
                from .providers.gpt4free_provider import GPT4FreeProvider
                self.providers.append(GPT4FreeProvider(ai_config))
                logger.info("‚úÖ GPT4Free –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è GPT4Free –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # OpenRouter (DeepSeek)
        if providers_config.get('openrouter', {}).get('enabled', True):
            try:
                from .providers.openrouter_provider import OpenRouterProvider
                self.providers.append(OpenRouterProvider(ai_config))
                logger.info("‚úÖ OpenRouter –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è OpenRouter –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # Google Gemini
        if providers_config.get('gemini', {}).get('enabled', True):
            try:
                from .providers.gemini_provider import GeminiProvider
                self.providers.append(GeminiProvider(ai_config))
                logger.info("‚úÖ Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # LocalAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if providers_config.get('localai', {}).get('enabled', False):
            try:
                from .providers.localai_provider import LocalAIProvider
                self.providers.append(LocalAIProvider(ai_config))
                logger.info("‚úÖ LocalAI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è LocalAI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        if not self.providers:
            logger.error("‚ùå –ù–∏ –æ–¥–∏–Ω AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
            raise RuntimeError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        
        logger.info(f"üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.providers)} AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    
    def _get_cache_key(self, prompt: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –∫—ç—à–∞"""
        import hashlib
        return hashlib.md5(prompt.encode()).hexdigest()
    
    def analyze_video(self, video_data: Dict[str, Any], prompt: Optional[str] = None) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI
        
        Args:
            video_data: –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∏ —Ç.–¥.)
            prompt: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
        if not prompt:
            prompt = self._create_default_prompt(video_data)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        if self.cache is not None:
            cache_key = self._get_cache_key(prompt)
            if cache_key in self.cache:
                logger.info("üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞")
                return self.cache[cache_key]
        
        # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å fallback
        result = self._execute_with_fallback(prompt)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
        if self.cache is not None and result:
            self.cache[cache_key] = result
        
        return result
    
    def _create_default_prompt(self, video_data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ"""
        title = video_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        description = video_data.get('description', '')[:500]  # –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –≤–∏–¥–µ–æ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª.

–ù–∞–∑–≤–∞–Ω–∏–µ: {title}
–û–ø–∏—Å–∞–Ω–∏–µ: {description}

–û—Ü–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–æ—Ç 1 –¥–æ 10):
1. –í–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
2. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ
3. –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
4. –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
5. –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è

–¢–∞–∫–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏:
- –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ö–µ—à—Ç–µ–≥–∏
- –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

–û—Ç–≤–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."""
        
        return prompt
    
    def _execute_with_fallback(self, prompt: str) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –º–µ–∂–¥—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è AI
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        max_retries = self.config.get('ai', {}).get('max_retries', 3)
        timeout = self.config.get('ai', {}).get('timeout', 30)
        
        # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        for attempt in range(max_retries):
            for i, provider in enumerate(self.providers):
                try:
                    logger.info(f"ü§ñ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º: {provider.name}")
                    
                    result = provider.generate(prompt, timeout=timeout)
                    
                    if result:
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {provider.name}")
                        return self._parse_response(result)
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å {provider.name}: {e}")
                    continue
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            if attempt < max_retries - 1:
                time.sleep(2)
        
        logger.error("‚ùå –í—Å–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return {
            "error": "–í—Å–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            "viral_score": 0,
            "analysis": "–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        }
    
    def _parse_response(self, response: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
            if isinstance(response, str):
                # –ò—â–µ–º JSON –≤ —Ç–µ–∫—Å—Ç–µ
                import re
                json_match = re.search(r'\{.*\}', response, re.DOTALL)
                if json_match:
                    return json.loads(json_match.group())
            
            return response if isinstance(response, dict) else {"analysis": response}
        
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
            return {"analysis": response}
    
    def get_provider_status(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        status = []
        for provider in self.providers:
            try:
                is_available = provider.test_connection()
                status.append({
                    "name": provider.name,
                    "available": is_available,
                    "priority": self.providers.index(provider) + 1
                })
            except:
                status.append({
                    "name": provider.name,
                    "available": False,
                    "priority": self.providers.index(provider) + 1
                })
        return status


class BaseAIProvider:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.name = "BaseProvider"
    
    def generate(self, prompt: str, timeout: int = 30) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI"""
        raise NotImplementedError
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É"""
        try:
            response = self.generate("Test", timeout=5)
            return bool(response)
        except:
            return False
