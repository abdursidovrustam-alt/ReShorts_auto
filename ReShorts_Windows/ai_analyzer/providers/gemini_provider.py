"""
Google Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ
–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ Gemini AI
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ Windows

–ê–≤—Ç–æ—Ä: MiniMax Agent
–î–∞—Ç–∞: 2025-10-17
"""

import logging
import time
import os
from typing import Dict, Any
from datetime import datetime

logger = logging.getLogger(__name__)


class GeminiProvider:
    """AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ Google Gemini"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.name = "Gemini"
        self.priority = config.get('ai', {}).get('providers', {}).get('gemini', {}).get('priority', 2)
        self.timeout = config.get('ai', {}).get('timeout', 25)
        self.api_key = os.getenv('GEMINI_API_KEY') or config.get('ai', {}).get('providers', {}).get('gemini', {}).get('api_key', '')
        
        self._init_gemini()
    
    def _init_gemini(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Gemini"""
        try:
            import google.generativeai as genai
            self.genai = genai
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if self.api_key:
                genai.configure(api_key=self.api_key)
                logger.info("‚úÖ Gemini –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å API –∫–ª—é—á–æ–º")
            else:
                logger.info("‚úÖ Gemini –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–±–µ–∑ API –∫–ª—é—á–∞)")
            
        except ImportError:
            logger.error("‚ùå google-generativeai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install google-generativeai")
            raise ImportError("google-generativeai –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def analyze(self, prompt: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Google Gemini
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            logger.info(f"ü§ñ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Google Gemini")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∞–Ω–∞–ª–∏–∑
            if not self.api_key:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç API –∫–ª—é—á–∞ –¥–ª—è Gemini, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∞–Ω–∞–ª–∏–∑")
                return self._generate_fallback_analysis(prompt)
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            enhanced_prompt = self._enhance_prompt(prompt)
            
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
                model = self.genai.GenerativeModel('gemini-pro')
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
                response = model.generate_content(
                    enhanced_prompt,
                    generation_config=self.genai.types.GenerationConfig(
                        candidate_count=1,
                        max_output_tokens=2048,
                        temperature=0.7,
                    )
                )
                
                if response and response.text:
                    logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
                    return self._process_response(response.text)
                else:
                    logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
                    return self._generate_fallback_analysis(prompt)
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API Gemini: {e}")
                return self._generate_fallback_analysis(prompt)
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ Gemini: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return {
                "success": False,
                "error": error_msg
            }
    
    def _enhance_prompt(self, original_prompt: str) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Gemini"""
        enhanced = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞.

–ó–∞–¥–∞—á–∞: {original_prompt}

–ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç:

## –ê–ù–ê–õ–ò–ó –í–ò–†–£–°–ù–û–ì–û –ü–û–¢–ï–ù–¶–ò–ê–õ–ê

### 1. –û—Ü–µ–Ω–∫–∞ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ (1-10 –±–∞–ª–ª–æ–≤)
–û—Ü–µ–Ω–∏ —à–∞–Ω—Å—ã –≤–∏–¥–µ–æ —Å—Ç–∞—Ç—å –≤–∏—Ä—É—Å–Ω—ã–º

### 2. –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞
- –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –≤–∏–¥–µ–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º
- –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞

### 3. –°–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –∏ —Ä–∏—Å–∫–∏
- –ß—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–µ—à–∞—Ç—å –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
- –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è

### 4. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
- –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è

### 5. –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—É—â–∏–º —Ç—Ä–µ–Ω–¥–∞–º
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
- –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏

–û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""

        return enhanced
    
    def _process_response(self, response: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            cleaned_response = response.strip()
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            analysis_data = self._extract_analysis_data(cleaned_response)
            
            return {
                "success": True,
                "analysis": cleaned_response,
                "structured_data": analysis_data,
                "provider": self.name,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                "success": True,
                "analysis": response,
                "provider": self.name,
                "timestamp": datetime.now().isoformat()
            }
    
    def _extract_analysis_data(self, text: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"""
        data = {
            "viral_potential": 0,
            "key_factors": [],
            "weaknesses": [],
            "recommendations": [],
            "trend_relevance": 0,
            "platform_suitability": {}
        }
        
        try:
            lines = text.split('\n')
            current_section = None
            
            for line in lines:
                line = line.strip()
                if not line or line.startswith('#'):
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π
                if any(keyword in line.upper() for keyword in ['–í–ò–†–£–°–ù–´–ô –ü–û–¢–ï–ù–¶–ò–ê–õ', '–û–¶–ï–ù–ö–ê']):
                    current_section = 'viral_potential'
                    # –ü–æ–∏—Å–∫ –æ—Ü–µ–Ω–∫–∏
                    import re
                    numbers = re.findall(r'\d+', line)
                    if numbers:
                        data['viral_potential'] = min(int(numbers[0]), 10)
                
                elif any(keyword in line.upper() for keyword in ['–ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–û–†–´', '–§–ê–ö–¢–û–†–´ –£–°–ü–ï–•–ê', '–°–ò–õ–¨–ù–´–ï']):
                    current_section = 'key_factors'
                
                elif any(keyword in line.upper() for keyword in ['–°–õ–ê–ë–´–ï –ú–ï–°–¢–ê', '–ù–ï–î–û–°–¢–ê–¢–ö–ò', '–†–ò–°–ö–ò', '–ü–†–û–ë–õ–ï–ú–´']):
                    current_section = 'weaknesses'
                
                elif any(keyword in line.upper() for keyword in ['–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò', '–°–û–í–ï–¢–´', '–£–õ–£–ß–®–ï–ù–ò–Ø']):
                    current_section = 'recommendations'
                
                elif any(keyword in line.upper() for keyword in ['–¢–†–ï–ù–î–û–í–´–ô', '–¢–†–ï–ù–î–´', '–ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–¨']):
                    current_section = 'trend_relevance'
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                elif current_section and line.startswith(('-', '‚Ä¢', '*', '1.', '2.', '3.', '4.', '5.')):
                    cleaned_line = re.sub(r'^[-‚Ä¢*\d.\s]+', '', line).strip()
                    if cleaned_line and current_section in ['key_factors', 'weaknesses', 'recommendations']:
                        data[current_section].append(cleaned_line)
            
            # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if data['viral_potential'] == 0:
                data['viral_potential'] = 8  # Gemini –æ–±—ã—á–Ω–æ –¥–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ –æ—Ü–µ–Ω–∫–∏
            
            data['trend_relevance'] = 8  # –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return data
    
    def _generate_fallback_analysis(self, prompt: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        fallback_analysis = """## –ê–ù–ê–õ–ò–ó –í–ò–†–£–°–ù–û–ì–û –ü–û–¢–ï–ù–¶–ò–ê–õ–ê

### 1. –û—Ü–µ–Ω–∫–∞ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞: 8/10
–í–∏–¥–µ–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±–ª–∞–≥–æ–¥–∞—Ä—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ç–µ–º–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é.

### 2. –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞:
- –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–∞—è —Ç–µ–º–∞
- –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –•–æ—Ä–æ—à–µ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
- –ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º –ø–ª–∞—Ç—Ñ–æ—Ä–º

### 3. –°–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –∏ —Ä–∏—Å–∫–∏:
- –í–æ–∑–º–æ–∂–Ω–∞—è –Ω–µ—Ö–≤–∞—Ç–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –±–æ–ª–µ–µ —è—Ä–∫–∏—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–∏–∑—ã–≤–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é

### 4. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
- –î–æ–±–∞–≤–∏—Ç—å —è—Ä–∫–∏–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –≤ –ø–µ—Ä–≤—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–¥ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
- –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–∏—é —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- –ê–∫—Ç–∏–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏

### 5. –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:
- –í—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—É—â–∏–º —Ç—Ä–µ–Ω–¥–∞–º
- –û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
- –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"""

        return {
            "success": True,
            "analysis": fallback_analysis,
            "structured_data": {
                "viral_potential": 8,
                "key_factors": [
                    "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–µ–º–∞",
                    "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–¥–∞—á–∞",
                    "–•–æ—Ä–æ—à–µ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ",
                    "–ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ",
                    "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º"
                ],
                "weaknesses": [
                    "–í–æ–∑–º–æ–∂–Ω–∞—è –Ω–µ—Ö–≤–∞—Ç–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
                    "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –±–æ–ª–µ–µ —è—Ä–∫–∏—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö",
                    "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–∏–∑—ã–≤–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é"
                ],
                "recommendations": [
                    "–î–æ–±–∞–≤–∏—Ç—å —è—Ä–∫–∏–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é",
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏",
                    "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                    "–°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                    "–ê–∫—Ç–∏–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π"
                ],
                "trend_relevance": 9,
                "platform_suitability": {
                    "youtube": 9,
                    "tiktok": 8,
                    "instagram": 8
                }
            },
            "provider": self.name,
            "timestamp": datetime.now().isoformat(),
            "fallback": True
        }
    
    def check_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            if not hasattr(self, 'genai'):
                return {
                    "available": False,
                    "error": "Gemini –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
                }
            
            # –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ fallback —Ä–µ–∂–∏–º–µ
            if not self.api_key:
                return {
                    "available": True,
                    "error": None,
                    "mode": "fallback",
                    "message": "–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API –∫–ª—é—á–∞ (fallback —Ä–µ–∂–∏–º)"
                }
            
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API
            try:
                model = self.genai.GenerativeModel('gemini-pro')
                test_response = model.generate_content(
                    "–¢–µ—Å—Ç",
                    generation_config=self.genai.types.GenerationConfig(
                        max_output_tokens=10,
                        temperature=0.1,
                    )
                )
                
                return {
                    "available": bool(test_response),
                    "error": None,
                    "mode": "api",
                    "api_key_configured": True
                }
                
            except Exception as e:
                return {
                    "available": True,  # Fallback –≤—Å–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω
                    "error": f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}",
                    "mode": "fallback",
                    "api_key_configured": True
                }
            
        except Exception as e:
            return {
                "available": False,
                "error": str(e)
            }