"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –±–µ–∑ API
–ü–æ–¥–¥–µ—Ä–∂–∫–∞: YouTube (yt-dlp), Instagram (instagrapi), TikTok (TikTok scraper)
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π fallback –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏
"""

import logging
import os
import time
from typing import Dict, Any, Optional, List
from pathlib import Path

logger = logging.getLogger(__name__)


class UniversalDownloader:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –≤–∏–¥–µ–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.download_path = config.get('download', {}).get('path', 'downloads')
        self.downloaders = []
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
        Path(self.download_path).mkdir(parents=True, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤
        self._init_downloaders()
    
    def _init_downloaders(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤"""
        download_config = self.config.get('download', {})
        methods = download_config.get('methods', {})
        
        # yt-dlp (YouTube, TikTok –∏ –¥—Ä—É–≥–∏–µ)
        if methods.get('ytdlp', {}).get('enabled', True):
            try:
                from .downloaders.ytdlp_downloader import YTDLPDownloader
                self.downloaders.append(YTDLPDownloader(self.config))
                logger.info("‚úÖ yt-dlp –∑–∞–≥—Ä—É–∑—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è yt-dlp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # Instagrapi (Instagram)
        if methods.get('instagrapi', {}).get('enabled', True):
            try:
                from .downloaders.instagrapi_downloader import InstagrapiDownloader
                self.downloaders.append(InstagrapiDownloader(self.config))
                logger.info("‚úÖ Instagrapi –∑–∞–≥—Ä—É–∑—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Instagrapi –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # TikTok Scraper
        if methods.get('tiktok', {}).get('enabled', True):
            try:
                from .downloaders.tiktok_downloader import TikTokDownloader
                self.downloaders.append(TikTokDownloader(self.config))
                logger.info("‚úÖ TikTok –∑–∞–≥—Ä—É–∑—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è TikTok –∑–∞–≥—Ä—É–∑—á–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        if not self.downloaders:
            logger.error("‚ùå –ù–∏ –æ–¥–∏–Ω –∑–∞–≥—Ä—É–∑—á–∏–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
            raise RuntimeError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤")
        
        logger.info(f"üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.downloaders)} –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤")
    
    def download_video(self, url: str, platform: Optional[str] = None) -> Dict[str, Any]:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞
        
        Args:
            url: URL –≤–∏–¥–µ–æ
            platform: –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (youtube, instagram, tiktok) –∏–ª–∏ None –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∞—á–∞–Ω–Ω–æ–º –≤–∏–¥–µ–æ
        """
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        if not platform:
            platform = self._detect_platform(url)
        
        logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å {platform}: {url}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∞—Ç—å —Å fallback
        max_retries = self.config.get('download', {}).get('max_retries', 3)
        
        for attempt in range(max_retries):
            for downloader in self.downloaders:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫ —ç—Ç—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
                if not downloader.supports_platform(platform):
                    continue
                
                try:
                    logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} —Å {downloader.name}")
                    
                    result = downloader.download(url)
                    
                    if result and result.get('success'):
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ {downloader.name}")
                        return result
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å {downloader.name}: {e}")
                    continue
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            if attempt < max_retries - 1:
                time.sleep(2)
        
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ: {url}")
        return {
            "success": False,
            "error": "–í—Å–µ –º–µ—Ç–æ–¥—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏",
            "url": url
        }
    
    def download_batch(self, urls: List[str]) -> List[Dict[str, Any]]:
        """
        –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        
        Args:
            urls: –°–ø–∏—Å–æ–∫ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        results = []
        
        for i, url in enumerate(urls, 1):
            logger.info(f"üì¶ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {i}/{len(urls)}")
            result = self.download_video(url)
            results.append(result)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏
            if i < len(urls):
                time.sleep(1)
        
        successful = sum(1 for r in results if r.get('success'))
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {successful}/{len(urls)}")
        
        return results
    
    def _detect_platform(self, url: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ URL"""
        url_lower = url.lower()
        
        if 'youtube.com' in url_lower or 'youtu.be' in url_lower:
            return 'youtube'
        elif 'instagram.com' in url_lower:
            return 'instagram'
        elif 'tiktok.com' in url_lower:
            return 'tiktok'
        elif 'facebook.com' in url_lower or 'fb.watch' in url_lower:
            return 'facebook'
        elif 'twitter.com' in url_lower or 'x.com' in url_lower:
            return 'twitter'
        else:
            return 'unknown'
    
    def get_downloader_status(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤"""
        status = []
        for downloader in self.downloaders:
            try:
                is_available = downloader.test_connection()
                status.append({
                    "name": downloader.name,
                    "available": is_available,
                    "platforms": downloader.supported_platforms,
                    "priority": self.downloaders.index(downloader) + 1
                })
            except:
                status.append({
                    "name": downloader.name,
                    "available": False,
                    "platforms": [],
                    "priority": self.downloaders.index(downloader) + 1
                })
        return status


class BaseDownloader:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.name = "BaseDownloader"
        self.supported_platforms = []
    
    def download(self, url: str) -> Dict[str, Any]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ"""
        raise NotImplementedError
    
    def supports_platform(self, platform: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        return platform in self.supported_platforms
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
        return True
