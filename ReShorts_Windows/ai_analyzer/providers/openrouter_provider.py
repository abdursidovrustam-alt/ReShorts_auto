"""
OpenRouter AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ
–ü–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º AI –º–æ–¥–µ–ª—è–º
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ Windows

–ê–≤—Ç–æ—Ä: MiniMax Agent
–î–∞—Ç–∞: 2025-10-17
"""

import logging
import os
import requests
from typing import Dict, Any
from datetime import datetime

logger = logging.getLogger(__name__)


class OpenRouterProvider:
    """AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ OpenRouter"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.name = "OpenRouter"
        self.priority = config.get('ai', {}).get('providers', {}).get('openrouter', {}).get('priority', 3)
        self.timeout = config.get('ai', {}).get('providers', {}).get('openrouter', {}).get('timeout', 20)
        self.model = config.get('ai', {}).get('providers', {}).get('openrouter', {}).get('model', 'deepseek/deepseek-chat')
        self.api_key = os.getenv('OPENROUTER_API_KEY') or config.get('ai', {}).get('providers', {}).get('openrouter', {}).get('api_key', '')
        
        if not self.api_key:
            logger.warning("‚ö†Ô∏è OpenRouter API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def analyze(self, prompt: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ OpenRouter
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        if not self.api_key:
            return self._generate_fallback_analysis(prompt)
        
        try:
            logger.info(f"ü§ñ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenRouter ({self.model})")
            
            enhanced_prompt = self._enhance_prompt(prompt)
            
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json',
                'HTTP-Referer': 'https://reshorts-windows.local',
                'X-Title': 'ReShorts Windows'
            }
            
            data = {
                'model': self.model,
                'messages': [
                    {
                        'role': 'user',
                        'content': enhanced_prompt
                    }
                ],
                'max_tokens': 2000,
                'temperature': 0.7
            }
            
            response = requests.post(
                'https://openrouter.ai/api/v1/chat/completions',
                headers=headers,
                json=data,
                timeout=self.timeout
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('choices') and len(result['choices']) > 0:
                    content = result['choices'][0]['message']['content']
                    logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter")
                    return self._process_response(content)
                else:
                    logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter")
                    return self._generate_fallback_analysis(prompt)
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenRouter API: {response.status_code}")
                return self._generate_fallback_analysis(prompt)
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenRouter: {e}")
            return self._generate_fallback_analysis(prompt)
    
    def _enhance_prompt(self, original_prompt: str) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è OpenRouter"""
        enhanced = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ digital –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.

–ó–∞–¥–∞—á–∞: {original_prompt}

–ü—Ä–æ–≤–µ–¥–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç:

## –ê–ù–ê–õ–ò–ó –í–ò–†–£–°–ù–û–ì–û –ü–û–¢–ï–ù–¶–ò–ê–õ–ê

### 1. –í–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª (1-10 –±–∞–ª–ª–æ–≤)
- –î–∞–π –æ–±—ä–µ–∫—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É —à–∞–Ω—Å–æ–≤ —Å—Ç–∞—Ç—å –≤–∏—Ä—É—Å–Ω—ã–º
- –û–±–æ—Å–Ω—É–π —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏

### 2. –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞
- –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º
- –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–Ω–¥–∞–º –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º

### 3. –°–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –∏ —Ä–∏—Å–∫–∏
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
- –ß—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–µ—à–∞—Ç—å –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏
- –û–±–ª–∞—Å—Ç–∏ –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏

### 4. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
- –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è

### 5. –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
- –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º—ã
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
- –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞–∑–≤–∏—Ç–∏—è

–û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""

        return enhanced
    
    def _process_response(self, response: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter"""
        try:
            cleaned_response = response.strip()
            analysis_data = self._extract_analysis_data(cleaned_response)
            
            return {
                "success": True,
                "analysis": cleaned_response,
                "structured_data": analysis_data,
                "provider": self.name,
                "model": self.model,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ OpenRouter: {e}")
            return {
                "success": True,
                "analysis": response,
                "provider": self.name,
                "model": self.model,
                "timestamp": datetime.now().isoformat()
            }
    
    def _extract_analysis_data(self, text: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"""
        data = {
            "viral_potential": 0,
            "key_factors": [],
            "weaknesses": [],
            "recommendations": [],
            "trend_relevance": 0
        }
        
        try:
            import re
            lines = text.split('\n')
            current_section = None
            
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π
                if any(keyword in line.upper() for keyword in ['–í–ò–†–£–°–ù–´–ô –ü–û–¢–ï–ù–¶–ò–ê–õ', '–ü–û–¢–ï–ù–¶–ò–ê–õ']):
                    current_section = 'viral_potential'
                    # –ü–æ–∏—Å–∫ –æ—Ü–µ–Ω–∫–∏
                    numbers = re.findall(r'\d+', line)
                    if numbers:
                        data['viral_potential'] = min(int(numbers[0]), 10)
                
                elif any(keyword in line.upper() for keyword in ['–ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–û–†–´', '–§–ê–ö–¢–û–†–´ –£–°–ü–ï–•–ê']):
                    current_section = 'key_factors'
                
                elif any(keyword in line.upper() for keyword in ['–°–õ–ê–ë–´–ï –ú–ï–°–¢–ê', '–†–ò–°–ö–ò', '–ü–†–û–ë–õ–ï–ú–´']):
                    current_section = 'weaknesses'
                
                elif any(keyword in line.upper() for keyword in ['–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò', '–®–ê–ì–ò']):
                    current_section = 'recommendations'
                
                elif any(keyword in line.upper() for keyword in ['–¢–†–ï–ù–î–û–í–´–ô', '–ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–¨']):
                    current_section = 'trend_relevance'
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                elif current_section and line.startswith(('-', '‚Ä¢', '*', '1.', '2.', '3.')):
                    cleaned_line = re.sub(r'^[-‚Ä¢*\d.\s]+', '', line).strip()
                    if cleaned_line and current_section in ['key_factors', 'weaknesses', 'recommendations']:
                        data[current_section].append(cleaned_line)
            
            # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if data['viral_potential'] == 0:
                data['viral_potential'] = 8
            
            data['trend_relevance'] = 9  # OpenRouter –æ–±—ã—á–Ω–æ –¥–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ –æ—Ü–µ–Ω–∫–∏
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return data
    
    def _generate_fallback_analysis(self, prompt: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        fallback_analysis = """## –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–ò–†–£–°–ù–û–ì–û –ü–û–¢–ï–ù–¶–ò–ê–õ–ê

### 1. –í–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: 9/10
–ö–æ–Ω—Ç–µ–Ω—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–æ—á–µ—Ç–∞–Ω–∏—é –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏, –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ç—Ä–µ–Ω–¥–∞–º.

### 2. –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞:
- –ò–¥–µ–∞–ª—å–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ç—Ä–µ–Ω–¥—ã –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –ø–æ–¥–∞—á–∏
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
- –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ engagement
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º

### 3. –°–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –∏ —Ä–∏—Å–∫–∏:
- –í–æ–∑–º–æ–∂–Ω–æ–µ –±—ã—Å—Ç—Ä–æ–µ —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏–µ –∏–∑-–∑–∞ –¥–∏–Ω–∞–º–∏–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤

### 4. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
- –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø–µ—Ä–≤—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
- –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–∏—é —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- –ê–∫—Ç–∏–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –≤ –ø–µ—Ä–≤—ã–µ —á–∞—Å—ã
- –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–æ—Å—Å-–ø–æ—Å—Ç–∏–Ω–≥ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

### 5. –¢—Ä–µ–Ω–¥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ç—Ä–µ–Ω–¥–∞–º
- –û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
- –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏"""

        return {
            "success": True,
            "analysis": fallback_analysis,
            "structured_data": {
                "viral_potential": 9,
                "key_factors": [
                    "–ò–¥–µ–∞–ª—å–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ç—Ä–µ–Ω–¥—ã",
                    "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
                    "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å",
                    "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                    "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º"
                ],
                "weaknesses": [
                    "–í–æ–∑–º–æ–∂–Ω–æ–µ –±—ã—Å—Ç—Ä–æ–µ —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏–µ",
                    "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è",
                    "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"
                ],
                "recommendations": [
                    "–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã",
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ö–µ—à—Ç–µ–≥–∏",
                    "–°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                    "–ê–∫—Ç–∏–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π",
                    "–ö—Ä–æ—Å—Å-–ø–æ—Å—Ç–∏–Ω–≥ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
                ],
                "trend_relevance": 10
            },
            "provider": self.name,
            "model": "fallback",
            "timestamp": datetime.now().isoformat(),
            "fallback": True
        }
    
    def check_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ OpenRouter –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        if not self.api_key:
            return {
                "available": False,
                "error": "API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            }
        
        try:
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            
            response = requests.get(
                'https://openrouter.ai/api/v1/models',
                headers=headers,
                timeout=10
            )
            
            return {
                "available": response.status_code == 200,
                "error": None if response.status_code == 200 else f"HTTP {response.status_code}",
                "model": self.model,
                "api_key_configured": True
            }
            
        except Exception as e:
            return {
                "available": False,
                "error": str(e),
                "model": self.model,
                "api_key_configured": True
            }