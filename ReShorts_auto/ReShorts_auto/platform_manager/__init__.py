#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞

–ê–≤—Ç–æ—Ä: MiniMax Agent
–î–∞—Ç–∞: 2025-10-17
"""

import os
import json
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime
from pathlib import Path

logger = logging.getLogger(__name__)

class PlatformManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    """
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.api_keys = config.get('api_keys', {})
        self.platform_settings = config.get('platforms', {})
        
        # –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –≤–∏–¥–µ–æ
        self.output_dir = Path(config.get('output', {}).get('directory', 'output'))
        
        logger.info("üåê –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def publish_to_platform(self, video_path: str, platform: str, metadata: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        
        Args:
            video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            platform: –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (youtube, tiktok, instagram)
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        logger.info(f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ {platform}: {Path(video_path).name}")
        
        if not self._is_platform_enabled(platform):
            return {
                'status': 'error',
                'message': f'–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ {platform} –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
            }
        
        try:
            if platform == 'youtube':
                return self._publish_to_youtube(video_path, metadata)
            elif platform == 'tiktok':
                return self._publish_to_tiktok(video_path, metadata)
            elif platform == 'instagram':
                return self._publish_to_instagram(video_path, metadata)
            else:
                return {
                    'status': 'error',
                    'message': f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}'
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ {platform}: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}'
            }
    
    def _is_platform_enabled(self, platform: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
        """
        return self.platform_settings.get(platform, {}).get('enabled', False)
    
    def _publish_to_youtube(self, video_path: str, metadata: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ YouTube
        """
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç YouTube Data API
        logger.info("üì∫ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ YouTube (–¥–µ–º–æ)")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        return {
            'status': 'success',
            'platform': 'youtube',
            'video_id': f"youtube_demo_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            'url': f"https://www.youtube.com/watch?v=demo_{metadata.get('title', '')}",
            'title': metadata.get('title', ''),
            'description': metadata.get('description', ''),
            'published_at': datetime.now().isoformat(),
            'privacy_status': metadata.get('privacy', 'public'),
            'note': '–î–µ–º–æ –≤–µ—Ä—Å–∏—è - —Ä–µ–∞–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ YouTube API'
        }
    
    def _publish_to_tiktok(self, video_path: str, metadata: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ TikTok
        """
        logger.info("üé• –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ TikTok (–¥–µ–º–æ)")
        
        return {
            'status': 'success',
            'platform': 'tiktok',
            'video_id': f"tiktok_demo_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            'url': f"https://www.tiktok.com/@user/video/demo_{metadata.get('title', '')}",
            'caption': metadata.get('caption', metadata.get('title', '')),
            'hashtags': metadata.get('hashtags', []),
            'published_at': datetime.now().isoformat(),
            'note': '–î–µ–º–æ –≤–µ—Ä—Å–∏—è - —Ä–µ–∞–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TikTok API'
        }
    
    def _publish_to_instagram(self, video_path: str, metadata: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ Instagram
        """
        logger.info("üì∑ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ Instagram (–¥–µ–º–æ)")
        
        return {
            'status': 'success',
            'platform': 'instagram',
            'media_id': f"instagram_demo_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            'url': f"https://www.instagram.com/reel/demo_{metadata.get('title', '')}",
            'caption': metadata.get('caption', metadata.get('title', '')),
            'hashtags': metadata.get('hashtags', []),
            'published_at': datetime.now().isoformat(),
            'note': '–î–µ–º–æ –≤–µ—Ä—Å–∏—è - —Ä–µ–∞–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Instagram API'
        }
    
    def batch_publish(self, videos: List[Dict[str, Any]], platforms: List[str]) -> Dict[str, Any]:
        """
        –ü–∞–∫–µ—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º
        
        Args:
            videos: –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            platforms: –°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º
        
        Returns:
            –°–≤–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        logger.info(f"üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {len(videos)} –≤–∏–¥–µ–æ –Ω–∞ {len(platforms)} –ø–ª–∞—Ç—Ñ–æ—Ä–º")
        
        results = {
            'total_videos': len(videos),
            'total_platforms': len(platforms),
            'publications': [],
            'summary': {
                'successful': 0,
                'failed': 0,
                'skipped': 0
            }
        }
        
        for video in videos:
            video_results = []
            
            for platform in platforms:
                if not self._is_platform_enabled(platform):
                    result = {
                        'video_id': video.get('id'),
                        'platform': platform,
                        'status': 'skipped',
                        'message': f'–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ {platform} –æ—Ç–∫–ª—é—á–µ–Ω–∞'
                    }
                    results['summary']['skipped'] += 1
                else:
                    metadata = self._prepare_metadata(video, platform)
                    result = self.publish_to_platform(video.get('processed_file', ''), platform, metadata)
                    
                    if result.get('status') == 'success':
                        results['summary']['successful'] += 1
                    else:
                        results['summary']['failed'] += 1
                
                video_results.append(result)
            
            results['publications'].append({
                'video': video,
                'platform_results': video_results
            })
        
        logger.info(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results['summary']}")
        return results
    
    def _prepare_metadata(self, video: Dict[str, Any], platform: str) -> Dict[str, Any]:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        """
        base_metadata = {
            'title': video.get('title', ''),
            'description': video.get('description', ''),
            'theme': video.get('theme', ''),
            'original_platform': video.get('platform', '')
        }
        
        # –ü–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if platform == 'youtube':
            base_metadata.update({
                'privacy': 'public',
                'category': '22',  # People & Blogs
                'tags': [base_metadata['theme'], 'shorts', '–≤–∏—Ä—É—Å–Ω–æ–µ']
            })
        elif platform == 'tiktok':
            base_metadata.update({
                'caption': f"{base_metadata['title']} #{base_metadata['theme']} #viral #shorts",
                'hashtags': [base_metadata['theme'], 'viral', 'shorts', 'fyp']
            })
        elif platform == 'instagram':
            base_metadata.update({
                'caption': f"{base_metadata['title']} #{base_metadata['theme']} #reels #viral",
                'hashtags': [base_metadata['theme'], 'reels', 'viral', 'instagram']
            })
        
        return base_metadata
    
    def schedule_publication(self, videos: List[Dict[str, Any]], platforms: List[str], 
                           schedule_time: datetime) -> Dict[str, Any]:
        """
        –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        
        Args:
            videos: –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ
            platforms: –°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º
            schedule_time: –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        logger.info(f"üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ {schedule_time}")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        schedule_id = f"schedule_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        return {
            'schedule_id': schedule_id,
            'scheduled_time': schedule_time.isoformat(),
            'videos_count': len(videos),
            'platforms': platforms,
            'status': 'scheduled',
            'created_at': datetime.now().isoformat(),
            'note': '–î–µ–º–æ –≤–µ—Ä—Å–∏—è - —Ä–µ–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cron/scheduler'
        }
    
    def get_platform_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
        """
        return {
            'enabled_platforms': [p for p, config in self.platform_settings.items() if config.get('enabled', False)],
            'total_platforms': len(self.platform_settings),
            'platform_details': self.platform_settings,
            'last_update': datetime.now().isoformat()
        }