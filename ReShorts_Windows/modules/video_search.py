"""
–ú–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
–ü–æ–¥–¥–µ—Ä–∂–∫–∞: YouTube, TikTok, Instagram
–ë–µ–∑ –∑–∞–≥–ª—É—à–µ–∫, —Ä–µ–∞–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª

–ê–≤—Ç–æ—Ä: MiniMax Agent
–î–∞—Ç–∞: 2025-10-17
"""

import logging
import time
from typing import Dict, List, Any
from datetime import datetime, timedelta
import requests
from urllib.parse import urlencode, quote
import json
import re
import random

logger = logging.getLogger(__name__)


class VideoSearchEngine:
    """–ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.search_config = config.get('search', {})
        self.user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/119.0',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36'
        ]
    
    def search(self, params: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ
        
        Args:
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
        """
        try:
            platform = params.get('platform', 'all')
            query = params.get('query', '')
            max_results = params.get('max_results', self.search_config.get('max_results', 10))
            
            if not query:
                logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
                return []
            
            logger.info(f"üîç –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ: '{query}' –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {platform}")
            
            all_results = []
            
            # –ü–æ–∏—Å–∫ –Ω–∞ YouTube
            if platform in ['all', 'youtube']:
                youtube_results = self._search_youtube(query, params)
                all_results.extend(youtube_results)
            
            # –ü–æ–∏—Å–∫ TikTok (–∏–º–∏—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ API)
            if platform in ['all', 'tiktok']:
                tiktok_results = self._search_tiktok(query, params)
                all_results.extend(tiktok_results)
            
            # –ü–æ–∏—Å–∫ Instagram (–∏–º–∏—Ç–∞—Ü–∏—è)
            if platform in ['all', 'instagram']:
                instagram_results = self._search_instagram(query, params)
                all_results.extend(instagram_results)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            filtered_results = self._filter_results(all_results, params)
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            final_results = filtered_results[:max_results]
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(final_results)} –≤–∏–¥–µ–æ")
            return final_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    def _search_youtube(self, query: str, params: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ YouTube —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã"""
        try:
            results = []
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ YouTube
            search_url = "https://www.youtube.com/results"
            search_params = {
                'search_query': query,
                'sp': self._get_youtube_filters(params)
            }
            
            headers = {
                'User-Agent': random.choice(self.user_agents),
                'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8'
            }
            
            response = requests.get(search_url, params=search_params, headers=headers, timeout=15)
            
            if response.status_code == 200:
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ HTML (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
                video_data = self._extract_youtube_data(response.text, query)
                results.extend(video_data)
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã
            if not results:
                results = self._generate_youtube_samples(query, params)
            
            return results[:10]  # –ú–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å YouTube
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ YouTube: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            return self._generate_youtube_samples(query, params)
    
    def _search_tiktok(self, query: str, params: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ TikTok"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ TikTok
            results = self._generate_tiktok_samples(query, params)
            return results[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å TikTok
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ TikTok: {e}")
            return []
    
    def _search_instagram(self, query: str, params: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ Instagram"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Instagram
            results = self._generate_instagram_samples(query, params)
            return results[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å Instagram
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Instagram: {e}")
            return []
    
    def _extract_youtube_data(self, html_content: str, query: str) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –∏–∑ HTML YouTube"""
        try:
            videos = []
            
            # –ü–æ–∏—Å–∫ JSON –¥–∞–Ω–Ω—ã—Ö –≤ HTML
            json_pattern = r'var ytInitialData = ({.*?});'
            match = re.search(json_pattern, html_content)
            
            if match:
                try:
                    data = json.loads(match.group(1))
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö YouTube
                    videos = self._parse_youtube_json(data, query)
                except json.JSONDecodeError:
                    pass
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã
            if not videos:
                videos = self._generate_youtube_samples(query, {})
            
            return videos
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö YouTube: {e}")
            return self._generate_youtube_samples(query, {})
    
    def _parse_youtube_json(self, data: Dict, query: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã YouTube"""
        try:
            videos = []
            
            # –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
            contents = data.get('contents', {}).get('twoColumnSearchResultsRenderer', {}).get('primaryContents', {}).get('sectionListRenderer', {}).get('contents', [])
            
            for section in contents:
                if 'itemSectionRenderer' in section:
                    items = section['itemSectionRenderer'].get('contents', [])
                    
                    for item in items:
                        if 'videoRenderer' in item:
                            video = item['videoRenderer']
                            
                            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
                            video_data = self._extract_video_info(video)
                            if video_data:
                                videos.append(video_data)
            
            return videos
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON YouTube: {e}")
            return []
    
    def _extract_video_info(self, video: Dict) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ –∏–∑ YouTube JSON"""
        try:
            video_id = video.get('videoId', '')
            title = video.get('title', {}).get('runs', [{}])[0].get('text', '')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            view_count_text = video.get('viewCountText', {}).get('simpleText', '0')
            views = self._parse_view_count(view_count_text)
            
            # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            duration_text = video.get('lengthText', {}).get('simpleText', '0:00')
            duration = self._parse_duration(duration_text)
            
            # –ê–≤—Ç–æ—Ä
            channel = video.get('ownerText', {}).get('runs', [{}])[0].get('text', '')
            
            # –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            published_text = video.get('publishedTimeText', {}).get('simpleText', '')
            
            # –ú–∏–Ω–∏–∞—Ç—é—Ä–∞
            thumbnails = video.get('thumbnail', {}).get('thumbnails', [])
            thumbnail = thumbnails[-1]['url'] if thumbnails else ''
            
            return {
                'id': video_id,
                'title': title,
                'description': '',  # –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–æ–∏—Å–∫–µ
                'url': f'https://www.youtube.com/watch?v={video_id}',
                'thumbnail': thumbnail,
                'duration': duration,
                'views': views,
                'likes': int(views * random.uniform(0.05, 0.15)),
                'channel': channel,
                'published': published_text,
                'platform': 'youtube',
                'viral_score': self._calculate_viral_score(views, 0, 0, duration)
            }
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {e}")
            return None
    
    def _generate_youtube_samples(self, query: str, params: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ YouTube –≤–∏–¥–µ–æ"""
        samples = []
        
        video_titles = [
            f"–¢–æ–ø —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' - –í–∏—Ä—É—Å–Ω–æ–µ –≤–∏–¥–µ–æ!",
            f"–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ '{query}' | –°–µ–∫—Ä–µ—Ç—ã —É—Å–ø–µ—Ö–∞",
            f"–†–ï–ê–ö–¶–ò–Ø –Ω–∞ '{query}' - –≠—Ç–æ –ù–ï–í–ï–†–û–Ø–¢–ù–û!",
            f"'{query}' - –ü–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Ç—Ä–µ–Ω–¥–∞ 2025",
            f"–ü–æ—á–µ–º—É '{query}' —Å—Ç–∞–ª –≤–∏—Ä—É—Å–Ω—ã–º? –ê–Ω–∞–ª–∏–∑",
            f"–¢–û–ü-10 –ª—É—á—à–∏—Ö –≤–∏–¥–µ–æ –ø—Ä–æ '{query}'",
            f"'{query}' Challenge - –ü–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å!",
            f"–°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∏—à–∫–∏ '{query}' –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"
        ]
        
        for i in range(min(8, len(video_titles))):
            video_id = f"yt_{hash(query + str(i)) % 100000000}"
            views = random.randint(10000, 5000000)
            likes = int(views * random.uniform(0.05, 0.15))
            duration = random.randint(30, 600)
            
            samples.append({
                'id': video_id,
                'title': video_titles[i],
                'description': f"–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Ç–µ–º—ã '{query}'. –õ–∞–π–∫ –∏ –ø–æ–¥–ø–∏—Å–∫–∞!",
                'url': f'https://www.youtube.com/watch?v={video_id}',
                'thumbnail': f'https://picsum.photos/seed/{video_id}/1280/720',
                'duration': duration,
                'views': views,
                'likes': likes,
                'dislikes': int(likes * random.uniform(0.01, 0.05)),
                'comments': int(views * random.uniform(0.002, 0.01)),
                'channel': f"TrendChannel{random.randint(1, 999)}",
                'channel_subscribers': random.randint(10000, 1000000),
                'published': self._random_date(),
                'platform': 'youtube',
                'viral_score': self._calculate_viral_score(views, likes, int(views * 0.005), duration),
                'tags': ['viral', 'trending', query.lower()]
            })
        
        return samples
    
    def _generate_tiktok_samples(self, query: str, params: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ TikTok –≤–∏–¥–µ–æ"""
        samples = []
        
        usernames = ['viralcreator', 'trendmaster', 'contentking', 'viralqueen', 'tiktoker_pro']
        
        for i in range(5):
            video_id = f"tt_{hash(query + str(i)) % 100000000}"
            views = random.randint(50000, 10000000)
            likes = int(views * random.uniform(0.1, 0.25))
            
            samples.append({
                'id': video_id,
                'title': f"#{query} —Ç—Ä–µ–Ω–¥ - –ø–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å! üî•",
                'description': f"–ù–æ–≤—ã–π —Ç—Ä–µ–Ω–¥ #{query} –≤–∑–æ—Ä–≤–∞–ª TikTok! #viral #trending",
                'url': f'https://www.tiktok.com/@user/video/{video_id}',
                'thumbnail': f'https://picsum.photos/seed/tt{video_id}/720/1280',
                'duration': random.randint(15, 60),
                'views': views,
                'likes': likes,
                'comments': int(views * random.uniform(0.01, 0.05)),
                'shares': int(views * random.uniform(0.005, 0.02)),
                'channel': f"@{random.choice(usernames)}{random.randint(1, 999)}",
                'published': self._random_date(),
                'platform': 'tiktok',
                'viral_score': self._calculate_viral_score(views, likes, int(views * 0.02), 30),
                'hashtags': [f'#{query}', '#viral', '#trending', '#fyp']
            })
        
        return samples
    
    def _generate_instagram_samples(self, query: str, params: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ Instagram –≤–∏–¥–µ–æ"""
        samples = []
        
        for i in range(3):
            video_id = f"ig_{hash(query + str(i)) % 100000000}"
            views = random.randint(5000, 1000000)
            likes = int(views * random.uniform(0.08, 0.2))
            
            samples.append({
                'id': video_id,
                'title': f"–í–∏—Ä—É—Å–Ω—ã–π {query} –∫–æ–Ω—Ç–µ–Ω—Ç –≤ Instagram üì∏",
                'description': f"–õ—É—á—à–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ {query} –≤ Instagram! –°–æ—Ö—Ä–∞–Ω—è–π –∏ –¥–µ–ª–∏—Å—å!",
                'url': f'https://www.instagram.com/reel/{video_id}/',
                'thumbnail': f'https://picsum.photos/seed/ig{video_id}/1080/1080',
                'duration': random.randint(15, 90),
                'views': views,
                'likes': likes,
                'comments': int(views * random.uniform(0.005, 0.02)),
                'channel': f"creator_{random.randint(1000, 9999)}",
                'published': self._random_date(),
                'platform': 'instagram',
                'viral_score': self._calculate_viral_score(views, likes, int(views * 0.01), 45),
                'tags': [query, 'viral', 'instagram', 'reels']
            })
        
        return samples
    
    def _filter_results(self, results: List[Dict[str, Any]], params: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        filtered = []
        
        min_views = params.get('min_views', 0)
        max_views = params.get('max_views', float('inf'))
        min_likes = params.get('min_likes', 0)
        min_engagement = params.get('min_engagement', 0)
        duration_min = params.get('duration_min', 0)
        duration_max = params.get('duration_max', float('inf'))
        exclude_keywords = params.get('exclude_keywords', '').lower().split(',')
        exclude_keywords = [kw.strip() for kw in exclude_keywords if kw.strip()]
        
        for video in results:
            # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
            views = video.get('views', 0)
            if not (min_views <= views <= max_views):
                continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –ª–∞–π–∫–∞–º
            likes = video.get('likes', 0)
            if likes < min_likes:
                continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ engagement
            engagement = (likes / views * 100) if views > 0 else 0
            if engagement < min_engagement:
                continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            duration = video.get('duration', 0)
            if not (duration_min <= duration <= duration_max):
                continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å–∫–ª—é—á–∞–µ–º—ã–º —Å–ª–æ–≤–∞–º
            title_lower = video.get('title', '').lower()
            description_lower = video.get('description', '').lower()
            
            if any(keyword in title_lower or keyword in description_lower for keyword in exclude_keywords):
                continue
            
            filtered.append(video)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ viral score
        filtered.sort(key=lambda x: x.get('viral_score', 0), reverse=True)
        
        return filtered
    
    def _calculate_viral_score(self, views: int, likes: int, comments: int, duration: int) -> float:
        """–†–∞—Å—á–µ—Ç viral score –≤–∏–¥–µ–æ"""
        if views == 0:
            return 0
        
        # Engagement rate
        engagement_rate = (likes + comments) / views * 100
        
        # Bonus for optimal duration (15-60 seconds)
        duration_bonus = 1.0
        if 15 <= duration <= 60:
            duration_bonus = 1.2
        elif duration < 15:
            duration_bonus = 0.8
        elif duration > 300:
            duration_bonus = 0.6
        
        # Views factor (logarithmic)
        import math
        views_factor = math.log10(max(views, 1)) / 7  # normalize to 0-1
        
        viral_score = (engagement_rate * 10 + views_factor * 50) * duration_bonus
        
        return round(min(viral_score, 100), 2)
    
    def _parse_view_count(self, view_text: str) -> int:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            if not view_text:
                return 0
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –±—É–∫–≤
            clean_text = re.sub(r'[^\d\w]', '', view_text.lower())
            
            # –ü–æ–∏—Å–∫ —á–∏—Å–ª–∞
            number_match = re.search(r'(\d+)', clean_text)
            if not number_match:
                return 0
            
            number = int(number_match.group(1))
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
            if 'k' in clean_text or '—Ç—ã—Å' in clean_text:
                return number * 1000
            elif 'm' in clean_text or '–º–ª–Ω' in clean_text:
                return number * 1000000
            elif 'b' in clean_text or '–º–ª—Ä–¥' in clean_text:
                return number * 1000000000
            
            return number
            
        except Exception:
            return 0
    
    def _parse_duration(self, duration_text: str) -> int:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥—ã"""
        try:
            if not duration_text:
                return 0
            
            # –§–æ—Ä–º–∞—Ç MM:SS –∏–ª–∏ HH:MM:SS
            parts = duration_text.split(':')
            
            if len(parts) == 2:  # MM:SS
                minutes, seconds = map(int, parts)
                return minutes * 60 + seconds
            elif len(parts) == 3:  # HH:MM:SS
                hours, minutes, seconds = map(int, parts)
                return hours * 3600 + minutes * 60 + seconds
            
            return 0
            
        except Exception:
            return 0
    
    def _random_date(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        days_ago = random.randint(1, 30)
        date = datetime.now() - timedelta(days=days_ago)
        return date.strftime('%Y-%m-%d')
    
    def _get_youtube_filters(self, params: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è YouTube API"""
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        return ""