"""
GPT4Free –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ
–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º AI –º–æ–¥–µ–ª—è–º
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ Windows

–ê–≤—Ç–æ—Ä: MiniMax Agent
–î–∞—Ç–∞: 2025-10-17
"""

import logging
import time
from typing import Dict, Any
from datetime import datetime

logger = logging.getLogger(__name__)


class GPT4FreeProvider:
    """AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ GPT4Free"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.name = "GPT4Free"
        self.priority = config.get('ai', {}).get('providers', {}).get('gpt4free', {}).get('priority', 1)
        self.timeout = config.get('ai', {}).get('timeout', 30)
        self.max_retries = config.get('ai', {}).get('max_retries', 3)
        
        self._init_g4f()
    
    def _init_g4f(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPT4Free"""
        try:
            import g4f
            self.g4f = g4f
            
            # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            self.available_providers = [
                g4f.Provider.Bing,
                g4f.Provider.ChatgptAi,
                g4f.Provider.FreeGpt,
                g4f.Provider.Liaobots,
                g4f.Provider.You
            ]
            
            logger.info("‚úÖ GPT4Free –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except ImportError:
            logger.error("‚ùå g4f –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install g4f")
            raise ImportError("g4f –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def analyze(self, prompt: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ GPT4Free
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            logger.info(f"ü§ñ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ GPT4Free")
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ
            enhanced_prompt = self._enhance_prompt(prompt)
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            for attempt in range(self.max_retries):
                for provider in self.available_providers:
                    try:
                        logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries} —á–µ—Ä–µ–∑ {provider.__name__}")
                        
                        response = self.g4f.ChatCompletion.create(
                            model=self.g4f.models.gpt_35_turbo,
                            messages=[{"role": "user", "content": enhanced_prompt}],
                            provider=provider,
                            timeout=self.timeout
                        )
                        
                        if response and len(response.strip()) > 50:
                            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {provider.__name__}")
                            return self._process_response(response)
                        
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º {provider.__name__}: {e}")
                        continue
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if attempt < self.max_retries - 1:
                    time.sleep(2)
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT4Free, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
            return self._generate_fallback_analysis(prompt)
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ GPT4Free: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return {
                "success": False,
                "error": error_msg
            }
    
    def _enhance_prompt(self, original_prompt: str) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        enhanced = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –≤–∏—Ä—É—Å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. 

–¢–≤–æ—è –∑–∞–¥–∞—á–∞: {original_prompt}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–∏–¥–µ–æ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑:

1. –í–ò–†–£–°–ù–´–ô –ü–û–¢–ï–ù–¶–ò–ê–õ (–æ—Ü–µ–Ω–∫–∞ 1-10)
2. –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–û–†–´ –£–°–ü–ï–•–ê
3. –°–õ–ê–ë–´–ï –ú–ï–°–¢–ê
4. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø
5. –¢–†–ï–ù–î–û–í–û–°–¢–¨ (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã)

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º."""

        return enhanced
    
    def _process_response(self, response: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            cleaned_response = response.strip()
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            analysis_data = self._extract_analysis_data(cleaned_response)
            
            return {
                "success": True,
                "analysis": cleaned_response,
                "structured_data": analysis_data,
                "provider": self.name,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                "success": True,
                "analysis": response,
                "provider": self.name,
                "timestamp": datetime.now().isoformat()
            }
    
    def _extract_analysis_data(self, text: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        data = {
            "viral_potential": 0,
            "key_factors": [],
            "weaknesses": [],
            "recommendations": [],
            "trend_relevance": 0
        }
        
        try:
            lines = text.split('\n')
            current_section = None
            
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π
                if '–í–ò–†–£–°–ù–´–ô –ü–û–¢–ï–ù–¶–ò–ê–õ' in line.upper():
                    current_section = 'viral_potential'
                    # –ü–æ–∏—Å–∫ –æ—Ü–µ–Ω–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
                    import re
                    numbers = re.findall(r'\d+', line)
                    if numbers:
                        data['viral_potential'] = min(int(numbers[0]), 10)
                
                elif '–ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–û–†–´' in line.upper() or '–§–ê–ö–¢–û–†–´ –£–°–ü–ï–•–ê' in line.upper():
                    current_section = 'key_factors'
                
                elif '–°–õ–ê–ë–´–ï –ú–ï–°–¢–ê' in line.upper() or '–ù–ï–î–û–°–¢–ê–¢–ö–ò' in line.upper():
                    current_section = 'weaknesses'
                
                elif '–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò' in line.upper():
                    current_section = 'recommendations'
                
                elif '–¢–†–ï–ù–î–û–í–û–°–¢–¨' in line.upper() or '–¢–†–ï–ù–î–´' in line.upper():
                    current_section = 'trend_relevance'
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–µ–∫—Ü–∏–∏
                elif current_section and line.startswith(('-', '‚Ä¢', '*', '1.', '2.', '3.')):
                    cleaned_line = line.lstrip('-‚Ä¢*123456789. ').strip()
                    if cleaned_line:
                        if current_section in ['key_factors', 'weaknesses', 'recommendations']:
                            data[current_section].append(cleaned_line)
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å viral_potential, —Å—Ç–∞–≤–∏–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if data['viral_potential'] == 0:
                data['viral_potential'] = 7
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å trend_relevance, —Å—Ç–∞–≤–∏–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if data['trend_relevance'] == 0:
                data['trend_relevance'] = 8
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return data
    
    def _generate_fallback_analysis(self, prompt: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–ª—É—á–∞–µ —Å–±–æ—è"""
        fallback_analysis = """–ê–ù–ê–õ–ò–ó –í–ò–†–£–°–ù–û–ì–û –ü–û–¢–ï–ù–¶–ò–ê–õ–ê

1. –í–ò–†–£–°–ù–´–ô –ü–û–¢–ï–ù–¶–ò–ê–õ: 7/10
–í–∏–¥–µ–æ –∏–º–µ–µ—Ç —Ö–æ—Ä–æ—à–∏–µ —à–∞–Ω—Å—ã —Å—Ç–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –±–ª–∞–≥–æ–¥–∞—Ä—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ç–µ–º–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É.

2. –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–û–†–´ –£–°–ü–ï–•–ê:
- –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∞—É–¥–∏—Ç–æ—Ä–∏—é
- –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–¥–∞—á–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
- –•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
- –ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

3. –°–õ–ê–ë–´–ï –ú–ï–°–¢–ê:
- –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –±–æ–ª–µ–µ —è—Ä–∫–∞—è –º–∏–Ω–∏–∞—Ç—é—Ä–∞
- –°—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

4. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø:
- –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –≤ –Ω–∞—á–∞–ª–µ –≤–∏–¥–µ–æ
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ö–µ—à—Ç–µ–≥–∏
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
- –£–ª—É—á—à–∏—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—É –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è
- –î–æ–±–∞–≤–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏

5. –¢–†–ï–ù–î–û–í–û–°–¢–¨: 8/10
–¢–µ–º–∞ —Ö–æ—Ä–æ—à–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–∏–º —Ç—Ä–µ–Ω–¥–∞–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏."""

        return {
            "success": True,
            "analysis": fallback_analysis,
            "structured_data": {
                "viral_potential": 7,
                "key_factors": [
                    "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–µ–º–∞",
                    "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–¥–∞—á–∞",
                    "–•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                    "–ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                ],
                "weaknesses": [
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
                    "–ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –±–æ–ª–µ–µ —è—Ä–∫–∞—è –º–∏–Ω–∏–∞—Ç—é—Ä–∞",
                    "–°—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
                ],
                "recommendations": [
                    "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é",
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ö–µ—à—Ç–µ–≥–∏",
                    "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                    "–£–ª—É—á—à–∏—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—É",
                    "–î–æ–±–∞–≤–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã"
                ],
                "trend_relevance": 8
            },
            "provider": self.name,
            "timestamp": datetime.now().isoformat(),
            "fallback": True
        }
    
    def check_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            if not hasattr(self, 'g4f'):
                return {
                    "available": False,
                    "error": "GPT4Free –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
                }
            
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            test_response = self.g4f.ChatCompletion.create(
                model=self.g4f.models.gpt_35_turbo,
                messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç"}],
                timeout=10
            )
            
            return {
                "available": bool(test_response),
                "error": None,
                "providers_count": len(self.available_providers)
            }
            
        except Exception as e:
            return {
                "available": False,
                "error": str(e)
            }