import os
import logging
from pathlib import Path
import yt_dlp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class VideoDownloader:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ —Å YouTube –∏—Å–ø–æ–ª—å–∑—É—è yt-dlp —Å cookies –¥–ª—è –æ–±—Ö–æ–¥–∞ bot detection
    """
    
    def __init__(self, cookies_file=None):
        """
        Args:
            cookies_file (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å cookies (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'cookies.txt')
        """
        self.cookies_file = cookies_file or 'cookies.txt'
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VideoDownloader (cookies: {self.cookies_file})")
    
    def download_video(self, video_url, output_path='downloads', quality='highest'):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ URL –∏—Å–ø–æ–ª—å–∑—É—è yt-dlp —Å cookies –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        
        Args:
            video_url (str): URL –≤–∏–¥–µ–æ –Ω–∞ YouTube
            output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ (–ø–∞–ø–∫–∞ –∏–ª–∏ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É)
            quality (str): –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ ('highest', '720p', '480p', '360p', '144p')
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∞—á–∞–Ω–Ω–æ–º –≤–∏–¥–µ–æ
                {
                    'success': bool,
                    'file_path': str,
                    'title': str,
                    'duration': int,
                    'error': str (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞)
                }
        """
        try:
            print("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YouTube —á–µ—Ä–µ–∑ yt-dlp...")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if not output_path.endswith('.mp4'):
                Path(output_path).mkdir(parents=True, exist_ok=True)
                output_template = os.path.join(output_path, '%(title)s.%(ext)s')
            else:
                Path(output_path).parent.mkdir(parents=True, exist_ok=True)
                output_template = output_path
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç
            if quality == 'highest':
                format_str = 'best[ext=mp4]'
            else:
                # –î–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç
                height = quality.replace('p', '')
                format_str = f'bestvideo[height<={height}][ext=mp4]+bestaudio[ext=m4a]/best[height<={height}][ext=mp4]'
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp
            ydl_opts = {
                'format': format_str,
                'outtmpl': output_template,
                'quiet': False,
                'no_warnings': False,
                'extract_flat': False,
                'extractor_args': 'youtube:player_client=ios,web',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º iOS –∏ web –∫–ª–∏–µ–Ω—Ç—ã
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º cookies –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(self.cookies_file):
                ydl_opts['cookiefile'] = self.cookies_file
                print(f"üç™ –ò—Å–ø–æ–ª—å–∑—É—é cookies –∏–∑ —Ñ–∞–π–ª–∞: {self.cookies_file}")
            else:
                print(f"‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: —Ñ–∞–π–ª cookies –Ω–µ –Ω–∞–π–¥–µ–Ω ({self.cookies_file})")
                print("   –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ YouTube bot detection")
            
            print(f"üîÑ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(video_url, download=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ info - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                if not isinstance(info, dict):
                    raise ValueError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(info)}")
                
                file_path = ydl.prepare_filename(info)
            
            if file_path and os.path.exists(file_path):
                print(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
                print(f"üì∫ –ù–∞–∑–≤–∞–Ω–∏–µ: {info.get('title', 'N/A')}")
                print(f"üíæ –§–∞–π–ª: {file_path}")
                
                return {
                    'success': True,
                    'file_path': file_path,
                    'title': info.get('title', 'Unknown'),
                    'duration': info.get('duration', 0),
                    'video_id': info.get('id', ''),
                    'view_count': info.get('view_count', 0),
                    'resolution': f"{info.get('width', 0)}x{info.get('height', 0)}",
                    'filesize_mb': info.get('filesize', 0) / (1024*1024) if info.get('filesize') else 0
                }
            else:
                error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"
                print(f"‚ùå {error_msg}")
                return {
                    'success': False,
                    'error': error_msg,
                    'file_path': None
                }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {str(e)}"
            print(f"‚ùå {error_msg}")
            logger.error(error_msg)
            return {
                'success': False,
                'error': error_msg,
                'file_path': None
            }
    
    def download_multiple_videos(self, video_urls, output_path='downloads', quality='highest'):
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ
        
        Args:
            video_urls (list): –°–ø–∏—Å–æ–∫ URL –≤–∏–¥–µ–æ
            output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
            quality (str): –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
        """
        results = []
        for i, url in enumerate(video_urls, 1):
            print(f"\n{'='*50}")
            print(f"[{i}/{len(video_urls)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ {i}")
            print(f"{'='*50}")
            result = self.download_video(url, output_path, quality)
            results.append(result)
        
        return results


def download_video(video_url, output_path='downloads', quality='highest', cookies_file=None):
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    
    Args:
        video_url (str): URL –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
        quality (str): –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
        cookies_file (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É cookies (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∞—á–∞–Ω–Ω–æ–º –≤–∏–¥–µ–æ
    """
    downloader = VideoDownloader(cookies_file=cookies_file)
    return downloader.download_video(video_url, output_path, quality)
