"""
–ú–µ–Ω–µ–¥–∂–µ—Ä AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ
–ü–æ–¥–¥–µ—Ä–∂–∫–∞: GPT4Free, Google Gemini, OpenRouter, LocalAI
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ Windows

–ê–≤—Ç–æ—Ä: MiniMax Agent
–î–∞—Ç–∞: 2025-10-17
"""

import logging
import time
from typing import Dict, List, Any, Optional
import json
import asyncio
from datetime import datetime

logger = logging.getLogger(__name__)


class AIProviderManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.ai_config = config.get('ai', {})
        self.providers = []
        self.cache = {}
        self.cache_enabled = self.ai_config.get('cache_enabled', True)
        
        self._init_providers()
    
    def _init_providers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        providers_config = self.ai_config.get('providers', {})
        
        # GPT4Free (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
        if providers_config.get('gpt4free', {}).get('enabled', True):
            try:
                from ai_analyzer.providers.gpt4free_provider import GPT4FreeProvider
                provider = GPT4FreeProvider(self.config)
                self.providers.append(provider)
                logger.info("‚úÖ GPT4Free –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è GPT4Free –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # Google Gemini (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
        if providers_config.get('gemini', {}).get('enabled', True):
            try:
                from ai_analyzer.providers.gemini_provider import GeminiProvider
                provider = GeminiProvider(self.config)
                self.providers.append(provider)
                logger.info("‚úÖ Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # OpenRouter (–ø–ª–∞—Ç–Ω—ã–π, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if providers_config.get('openrouter', {}).get('enabled', False):
            try:
                from ai_analyzer.providers.openrouter_provider import OpenRouterProvider
                provider = OpenRouterProvider(self.config)
                self.providers.append(provider)
                logger.info("‚úÖ OpenRouter –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # LocalAI (–ª–æ–∫–∞–ª—å–Ω—ã–π, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if providers_config.get('localai', {}).get('enabled', False):
            try:
                from ai_analyzer.providers.localai_provider import LocalAIProvider
                provider = LocalAIProvider(self.config)
                self.providers.append(provider)
                logger.info("‚úÖ LocalAI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è LocalAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        self.providers.sort(key=lambda p: p.priority)
        
        if not self.providers:
            logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤!")
    
    def analyze(self, video_data: Any, prompt: str = "") -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é AI
        
        Args:
            video_data: –î–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ (dict, str –∏–ª–∏ JSON)
            prompt: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if isinstance(video_data, str):
                try:
                    video_data = json.loads(video_data)
                except json.JSONDecodeError:
                    # –ï—Å–ª–∏ –Ω–µ JSON, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                    pass
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
            full_prompt = self._create_analysis_prompt(video_data, prompt)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
            cache_key = self._get_cache_key(full_prompt)
            if self.cache_enabled and cache_key in self.cache:
                logger.info("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫–µ—à–∞")
                return self.cache[cache_key]
            
            logger.info("ü§ñ –ù–∞—á–∞–ª–æ AI –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
            last_error = None
            for provider in self.providers:
                try:
                    logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ {provider.name}")
                    result = provider.analyze(full_prompt)
                    
                    if result.get('success'):
                        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ {provider.name}")
                        
                        # –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        enriched_result = self._enrich_analysis_result(result, video_data, provider.name)
                        
                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–µ—à
                        if self.cache_enabled:
                            self.cache[cache_key] = enriched_result
                        
                        return enriched_result
                    else:
                        last_error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                        logger.warning(f"‚ö†Ô∏è {provider.name}: {last_error}")
                        
                except Exception as e:
                    last_error = str(e)
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {provider.name}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}"
            logger.error(f"‚ùå {error_msg}")
            
            return {
                "success": False,
                "error": error_msg,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return {
                "success": False,
                "error": error_msg,
                "timestamp": datetime.now().isoformat()
            }
    
    def _create_analysis_prompt(self, video_data: Any, custom_prompt: str = "") -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        base_prompt = self.ai_config.get('default_prompt', 
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –≤–∏–¥–µ–æ –∏ –æ–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –æ–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∏—Ä—É—Å–Ω—ã–º.")
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ
        if isinstance(video_data, dict):
            video_info = []
            
            if video_data.get('title'):
                video_info.append(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {video_data['title']}")
            
            if video_data.get('description'):
                desc = str(video_data['description'])[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                video_info.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc}")
            
            if video_data.get('views'):
                video_info.append(f"–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {video_data['views']:,}")
            
            if video_data.get('likes'):
                video_info.append(f"–õ–∞–π–∫–∏: {video_data['likes']:,}")
            
            if video_data.get('comments'):
                video_info.append(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {video_data['comments']:,}")
            
            if video_data.get('duration'):
                video_info.append(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_data['duration']} —Å–µ–∫")
            
            if video_data.get('platform'):
                video_info.append(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {video_data['platform']}")
            
            if video_data.get('viral_score'):
                video_info.append(f"Viral Score: {video_data['viral_score']}")
            
            video_text = "\n".join(video_info)
        else:
            video_text = str(video_data)
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
        if custom_prompt:
            full_prompt = f"{custom_prompt}\n\n–î–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ:\n{video_text}"
        else:
            full_prompt = f"{base_prompt}\n\n–î–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ:\n{video_text}"
        
        return full_prompt
    
    def _enrich_analysis_result(self, result: Dict[str, Any], video_data: Any, provider_name: str) -> Dict[str, Any]:
        """–û–±–æ–≥–∞—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        enriched = result.copy()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        enriched.update({
            "provider": provider_name,
            "timestamp": datetime.now().isoformat(),
            "video_metadata": self._extract_video_metadata(video_data)
        })
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'recommendations' not in enriched:
            enriched['recommendations'] = self._generate_basic_recommendations(video_data)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'scores' not in enriched:
            enriched['scores'] = self._generate_basic_scores(video_data)
        
        return enriched
    
    def _extract_video_metadata(self, video_data: Any) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ"""
        if not isinstance(video_data, dict):
            return {}
        
        return {
            "platform": video_data.get('platform', 'unknown'),
            "duration": video_data.get('duration', 0),
            "views": video_data.get('views', 0),
            "engagement_rate": self._calculate_engagement_rate(video_data),
            "viral_score": video_data.get('viral_score', 0)
        }
    
    def _calculate_engagement_rate(self, video_data: Dict[str, Any]) -> float:
        """–†–∞—Å—á–µ—Ç engagement rate"""
        views = video_data.get('views', 0)
        likes = video_data.get('likes', 0)
        comments = video_data.get('comments', 0)
        
        if views == 0:
            return 0
        
        return round((likes + comments) / views * 100, 2)
    
    def _generate_basic_recommendations(self, video_data: Any) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = [
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ö–µ—à—Ç–µ–≥–∏",
            "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            "–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∏–Ω–∏–∞—Ç—é—Ä—ã"
        ]
        
        if isinstance(video_data, dict):
            duration = video_data.get('duration', 0)
            if duration > 60:
                recommendations.append("–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –¥–æ 15-60 —Å–µ–∫—É–Ω–¥")
            
            engagement = self._calculate_engagement_rate(video_data)
            if engagement < 5:
                recommendations.append("–£–ª—É—á—à–∏—Ç–µ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
        
        return recommendations
    
    def _generate_basic_scores(self, video_data: Any) -> Dict[str, float]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫"""
        scores = {
            "viral_potential": 7.5,
            "content_quality": 8.0,
            "engagement_quality": 7.0,
            "trend_relevance": 8.5
        }
        
        if isinstance(video_data, dict):
            viral_score = video_data.get('viral_score', 0)
            if viral_score > 0:
                scores["viral_potential"] = min(viral_score / 10, 10)
        
        return scores
    
    def _get_cache_key(self, prompt: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è –∫–µ—à–∞"""
        import hashlib
        return hashlib.md5(prompt.encode()).hexdigest()
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        status = {}
        
        for provider in self.providers:
            try:
                provider_status = provider.check_status()
                status[provider.name] = {
                    "available": provider_status.get('available', False),
                    "error": provider_status.get('error'),
                    "priority": provider.priority,
                    "last_used": getattr(provider, 'last_used', None)
                }
            except Exception as e:
                status[provider.name] = {
                    "available": False,
                    "error": str(e),
                    "priority": getattr(provider, 'priority', 999)
                }
        
        return status
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞"""
        self.cache.clear()
        logger.info("üóëÔ∏è –ö–µ—à AI –∞–Ω–∞–ª–∏–∑–æ–≤ –æ—á–∏—â–µ–Ω")
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞"""
        return {
            "enabled": self.cache_enabled,
            "size": len(self.cache),
            "memory_usage": sum(len(str(v)) for v in self.cache.values())
        }