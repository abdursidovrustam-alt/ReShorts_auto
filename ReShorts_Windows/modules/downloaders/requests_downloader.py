"""
–ó–∞–≥—Ä—É–∑—á–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ requests –¥–ª—è –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ MP4, WEBM –∏ –¥—Ä—É–≥–∏–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ Windows

–ê–≤—Ç–æ—Ä: MiniMax Agent
–î–∞—Ç–∞: 2025-10-17
"""

import logging
import os
import requests
from typing import Dict, Any
from pathlib import Path
from urllib.parse import urlparse, unquote
import time
import mimetypes

logger = logging.getLogger(__name__)


class RequestsDownloader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ requests –¥–ª—è –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.name = "requests"
        self.supported_platforms = ['unknown']  # –î–ª—è –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫
        self.download_path = Path(config.get('download', {}).get('path', 'downloads'))
        self.timeout = config.get('download', {}).get('timeout', 60)
        self.max_file_size = config.get('download', {}).get('max_file_size', 100) * 1024 * 1024  # MB –≤ –±–∞–π—Ç—ã
    
    def download(self, url: str, **kwargs) -> Dict[str, Any]:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ requests
        
        Args:
            url: URL –≤–∏–¥–µ–æ
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∞—á–∞–Ω–Ω–æ–º –≤–∏–¥–µ–æ
        """
        try:
            logger.info(f"üîΩ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ requests: {url}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ
            if not self._is_direct_video_url(url):
                return {
                    "success": False,
                    "error": "–ù–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–∏–¥–µ–æ"
                }
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
            head_response = requests.head(url, headers=headers, timeout=10, allow_redirects=True)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            content_length = head_response.headers.get('content-length')
            if content_length:
                file_size = int(content_length)
                if file_size > self.max_file_size:
                    return {
                        "success": False,
                        "error": f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size / 1024 / 1024:.1f} MB"
                    }
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            filename = self._get_filename_from_url(url, head_response)
            file_path = self.download_path / filename
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            start_time = time.time()
            response = requests.get(url, headers=headers, timeout=self.timeout, stream=True)
            response.raise_for_status()
            
            downloaded_size = 0
            with open(file_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        downloaded_size += len(chunk)
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤–æ –≤—Ä–µ–º—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        if downloaded_size > self.max_file_size:
                            f.close()
                            file_path.unlink()  # –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                            return {
                                "success": False,
                                "error": "–§–∞–π–ª –ø—Ä–µ–≤—ã—Å–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–æ –≤—Ä–µ–º—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
                            }
            
            download_time = time.time() - start_time
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è
            if not file_path.exists() or file_path.stat().st_size == 0:
                return {
                    "success": False,
                    "error": "–§–∞–π–ª –Ω–µ —Å–∫–∞—á–∞–ª—Å—è –∏–ª–∏ –ø—É—Å—Ç–æ–π"
                }
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result = {
                "success": True,
                "file_path": str(file_path),
                "file_size": file_path.stat().st_size,
                "title": file_path.stem,
                "filename": filename,
                "url": url,
                "download_time": download_time,
                "speed": file_path.stat().st_size / download_time if download_time > 0 else 0,
                "content_type": head_response.headers.get('content-type', ''),
                "platform": "direct_link",
                "downloader": self.name
            }
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {filename} ({file_path.stat().st_size / 1024 / 1024:.1f} MB)")
            return result
            
        except requests.exceptions.RequestException as e:
            error_msg = f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return {
                "success": False,
                "error": error_msg
            }
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return {
                "success": False,
                "error": error_msg
            }
    
    def get_info(self, url: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        
        Args:
            url: URL —Ñ–∞–π–ª–∞
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        """
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            response = requests.head(url, headers=headers, timeout=10, allow_redirects=True)
            response.raise_for_status()
            
            filename = self._get_filename_from_url(url, response)
            content_length = response.headers.get('content-length')
            
            return {
                "success": True,
                "filename": filename,
                "file_size": int(content_length) if content_length else None,
                "content_type": response.headers.get('content-type', ''),
                "last_modified": response.headers.get('last-modified', ''),
                "url": url,
                "is_video": self._is_video_content_type(response.headers.get('content-type', ''))
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return {
                "success": False,
                "error": error_msg
            }
    
    def check_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ requests
            test_url = "https://httpbin.org/status/200"
            response = requests.head(test_url, timeout=5)
            
            return {
                "available": response.status_code == 200,
                "error": None
            }
            
        except Exception as e:
            return {
                "available": False,
                "error": str(e)
            }
    
    def _is_direct_video_url(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–∏–¥–µ–æ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            parsed_url = urlparse(url)
            path = unquote(parsed_url.path).lower()
            
            video_extensions = ['.mp4', '.webm', '.avi', '.mov', '.mkv', '.flv', '.wmv', '.m4v']
            
            for ext in video_extensions:
                if path.endswith(ext):
                    return True
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ HEAD –∑–∞–ø—Ä–æ—Å
            try:
                headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'}
                response = requests.head(url, headers=headers, timeout=10, allow_redirects=True)
                content_type = response.headers.get('content-type', '').lower()
                
                return self._is_video_content_type(content_type)
                
            except:
                pass
            
            return False
            
        except Exception:
            return False
    
    def _is_video_content_type(self, content_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ content-type –≤–∏–¥–µ–æ"""
        video_types = [
            'video/mp4',
            'video/webm',
            'video/avi',
            'video/quicktime',
            'video/x-msvideo',
            'video/x-flv',
            'video/x-ms-wmv'
        ]
        
        return any(vtype in content_type.lower() for vtype in video_types)
    
    def _get_filename_from_url(self, url: str, response: requests.Response = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–∑ URL –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Content-Disposition
            if response and 'content-disposition' in response.headers:
                content_disposition = response.headers['content-disposition']
                if 'filename=' in content_disposition:
                    filename = content_disposition.split('filename=')[1].strip('"\'')
                    return self._sanitize_filename(filename)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–∑ URL
            parsed_url = urlparse(url)
            path = unquote(parsed_url.path)
            filename = os.path.basename(path)
            
            if filename and '.' in filename:
                return self._sanitize_filename(filename)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            timestamp = int(time.time())
            
            # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ content-type
            if response:
                content_type = response.headers.get('content-type', '')
                extension = mimetypes.guess_extension(content_type.split(';')[0])
                if extension:
                    return f"video_{timestamp}{extension}"
            
            return f"video_{timestamp}.mp4"
            
        except Exception:
            timestamp = int(time.time())
            return f"video_{timestamp}.mp4"
    
    def _sanitize_filename(self, filename: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è Windows"""
        if not filename:
            return f"video_{int(time.time())}.mp4"
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Windows
        invalid_chars = '<>:"/\\|?*'
        for char in invalid_chars:
            filename = filename.replace(char, '_')
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –≤ –∫–æ–Ω—Ü–µ (–ø—Ä–æ–±–ª–µ–º–∞ Windows)
        filename = filename.rstrip('.')
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
        if len(filename) > 100:
            name, ext = os.path.splitext(filename)
            filename = name[:100-len(ext)] + ext
        
        return filename.strip() or f"video_{int(time.time())}.mp4"