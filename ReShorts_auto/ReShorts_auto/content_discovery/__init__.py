#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö

–ê–≤—Ç–æ—Ä: MiniMax Agent
–î–∞—Ç–∞: 2025-10-17
"""

import requests
import json
import time
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

class ContentDiscovery:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    –Ω–∞ YouTube, TikTok –∏ Instagram
    """
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.api_keys = config.get('api_keys', {})
        self.platform_settings = config.get('platforms', {})
        
    def search_viral_content(self, theme: str, platform: str, limit: int = 10) -> List[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ
        
        Args:
            theme: –¢–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            platform: –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (youtube, tiktok, instagram)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        logger.info(f"üîç –ü–æ–∏—Å–∫ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {theme} –Ω–∞ {platform}")
        
        if platform == 'youtube':
            return self._search_youtube(theme, limit)
        elif platform == 'tiktok':
            return self._search_tiktok(theme, limit)
        elif platform == 'instagram':
            return self._search_instagram(theme, limit)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}")
    
    def _search_youtube(self, theme: str, limit: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ –Ω–∞ YouTube —á–µ—Ä–µ–∑ YouTube Data API v3
        """
        api_key = self.api_keys.get('youtube_api_key')
        if not api_key:
            logger.warning("YouTube API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ")
            return self._generate_demo_results(theme, 'youtube', limit)
        
        try:
            # –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ
            search_url = "https://www.googleapis.com/youtube/v3/search"
            search_params = {
                'key': api_key,
                'part': 'snippet',
                'type': 'video',
                'q': f"{theme} shorts",
                'order': 'viewCount',
                'publishedAfter': (datetime.now() - timedelta(days=30)).isoformat() + 'Z',
                'maxResults': limit,
                'videoDuration': 'short'  # –¢–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ
            }
            
            response = requests.get(search_url, params=search_params)
            response.raise_for_status()
            search_data = response.json()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
            video_ids = [item['id']['videoId'] for item in search_data.get('items', [])]
            if not video_ids:
                return []
            
            stats_url = "https://www.googleapis.com/youtube/v3/videos"
            stats_params = {
                'key': api_key,
                'part': 'statistics,contentDetails',
                'id': ','.join(video_ids)
            }
            
            stats_response = requests.get(stats_url, params=stats_params)
            stats_response.raise_for_status()
            stats_data = stats_response.json()
            
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            results = []
            for i, item in enumerate(search_data.get('items', [])):
                video_id = item['id']['videoId']
                snippet = item['snippet']
                
                # –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ
                stats = next((s['statistics'] for s in stats_data.get('items', []) if s['id'] == video_id), {})
                duration_info = next((s['contentDetails'] for s in stats_data.get('items', []) if s['id'] == video_id), {})
                
                video_data = {
                    'id': video_id,
                    'platform': 'youtube',
                    'title': snippet.get('title', ''),
                    'description': snippet.get('description', ''),
                    'url': f"https://www.youtube.com/watch?v={video_id}",
                    'thumbnail': snippet.get('thumbnails', {}).get('high', {}).get('url', ''),
                    'published_at': snippet.get('publishedAt', ''),
                    'channel': snippet.get('channelTitle', ''),
                    'views': int(stats.get('viewCount', 0)),
                    'likes': int(stats.get('likeCount', 0)),
                    'comments': int(stats.get('commentCount', 0)),
                    'duration': duration_info.get('duration', ''),
                    'viral_score': self._calculate_viral_score(stats),
                    'theme': theme
                }
                results.append(video_data)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏
            results.sort(key=lambda x: x['viral_score'], reverse=True)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} YouTube –≤–∏–¥–µ–æ")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ YouTube: {e}")
            return self._generate_demo_results(theme, 'youtube', limit)
    
    def _search_tiktok(self, theme: str, limit: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ –Ω–∞ TikTok (–¥–µ–º–æ –≤–µ—Ä—Å–∏—è)
        """
        logger.info(f"üîç –ü–æ–∏—Å–∫ –Ω–∞ TikTok: {theme}")
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç TikTok API
        return self._generate_demo_results(theme, 'tiktok', limit)
    
    def _search_instagram(self, theme: str, limit: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ –Ω–∞ Instagram (–¥–µ–º–æ –≤–µ—Ä—Å–∏—è)
        """
        logger.info(f"üîç –ü–æ–∏—Å–∫ –Ω–∞ Instagram: {theme}")
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç Instagram Basic Display API
        return self._generate_demo_results(theme, 'instagram', limit)
    
    def _calculate_viral_score(self, stats: Dict[str, Any]) -> float:
        """
        –†–∞—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–∞ –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        views = int(stats.get('viewCount', 0))
        likes = int(stats.get('likeCount', 0))
        comments = int(stats.get('commentCount', 0))
        
        if views == 0:
            return 0.0
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤–∏—Ä—É—Å–Ω–æ—Å—Ç–∏
        like_ratio = likes / views if views > 0 else 0
        comment_ratio = comments / views if views > 0 else 0
        engagement = like_ratio + comment_ratio * 2  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–µ—Å—è—Ç –±–æ–ª—å—à–µ
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (0-1)
        viral_score = min(1.0, engagement * 10)
        
        return round(viral_score, 3)
    
    def _generate_demo_results(self, theme: str, platform: str, limit: int) -> List[Dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        logger.info(f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {platform}")
        
        results = []
        for i in range(1, min(limit + 1, 11)):
            video_data = {
                'id': f"{platform}_demo_{i}",
                'platform': platform,
                'title': f"{theme} - –í–∏—Ä—É—Å–Ω–æ–µ –≤–∏–¥–µ–æ {i}",
                'description': f"–î–µ–º–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ {theme}",
                'url': f"https://{platform}.com/demo_{i}",
                'thumbnail': f"https://picsum.photos/320/240?random={i}",
                'published_at': (datetime.now() - timedelta(days=i)).isoformat(),
                'channel': f"–ö–∞–Ω–∞–ª{i}",
                'views': 50000 + (i * 10000),
                'likes': 5000 + (i * 1000),
                'comments': 500 + (i * 100),
                'duration': f"00:0{min(i + 10, 59)}",
                'viral_score': round(0.7 + (i * 0.02), 3),
                'theme': theme
            }
            results.append(video_data)
        
        return results
    
    def analyze_trends(self, platform: str, days: int = 7) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        """
        logger.info(f"üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ {platform} –∑–∞ {days} –¥–Ω–µ–π")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ç–µ–º
        trending_topics = [
            "–º–æ—Ç–∏–≤–∞—Ü–∏—è", "–ª–∞–π—Ñ—Ö–∞–∫–∏", "—é–º–æ—Ä", "—Ç–∞–Ω—Ü—ã", "–≥–æ—Ç–æ–≤–∫–∞",
            "—Å–ø–æ—Ä—Ç", "–∫—Ä–∞—Å–æ—Ç–∞", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–º—É–∑—ã–∫–∞"
        ]
        
        return {
            'platform': platform,
            'period_days': days,
            'trending_topics': trending_topics[:5],
            'analysis_date': datetime.now().isoformat()
        }