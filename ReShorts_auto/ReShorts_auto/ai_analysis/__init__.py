#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞

–ê–≤—Ç–æ—Ä: MiniMax Agent
–î–∞—Ç–∞: 2025-10-17
"""

import openai
import json
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class AIAnalyzer:
    """
    –ö–ª–∞—Å—Å –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞
    """
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        api_key = config.get('api_keys', {}).get('openai_api_key')
        if api_key:
            openai.api_key = api_key
            self.ai_available = True
        else:
            self.ai_available = False
            logger.warning("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def analyze_viral_potential(self, videos: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –≤–∏–¥–µ–æ
        
        Args:
            videos: –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        Returns:
            –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ AI –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        logger.info(f"üß† AI –∞–Ω–∞–ª–∏–∑ {len(videos)} –≤–∏–¥–µ–æ")
        
        analyzed_videos = []
        for video in videos:
            analysis = self._analyze_single_video(video)
            video.update(analysis)
            analyzed_videos.append(video)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ AI –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—É
        analyzed_videos.sort(key=lambda x: x.get('ai_potential', 0), reverse=True)
        
        return analyzed_videos
    
    def _analyze_single_video(self, video: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        """
        if not self.ai_available:
            return self._generate_demo_analysis(video)
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_prompt = self._create_analysis_prompt(video)
            
            # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö."},
                    {"role": "user", "content": analysis_prompt}
                ],
                max_tokens=500,
                temperature=0.3
            )
            
            ai_response = response.choices[0].message.content
            return self._parse_ai_response(ai_response)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return self._generate_demo_analysis(video)
    
    def _create_analysis_prompt(self, video: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
        """
        return f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ:

–ù–∞–∑–≤–∞–Ω–∏–µ: {video.get('title', '')}
–û–ø–∏—Å–∞–Ω–∏–µ: {video.get('description', '')[:200]}...
–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {video.get('platform', '')}
–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {video.get('views', 0):,}
–õ–∞–π–∫–∏: {video.get('likes', 0):,}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {video.get('comments', 0):,}
–¢–µ–∫—É—â–∏–π –≤–∏—Ä—É—Å–Ω—ã–π —Å—á–µ—Ç: {video.get('viral_score', 0)}

–û—Ü–µ–Ω–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 1:
1. AI –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª (–æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞)
2. –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
3. –£—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
4. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏
5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
  "ai_potential": 0.85,
  "content_quality": 0.9,
  "engagement_level": 0.8,
  "uniqueness_potential": 0.75,
  "recommendation": "high",
  "analysis_notes": "–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑"
}}
"""
    
    def _parse_ai_response(self, response: str) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
        """
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            start = response.find('{')
            end = response.rfind('}') + 1
            if start != -1 and end != 0:
                json_str = response[start:end]
                return json.loads(json_str)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return self._generate_demo_analysis({})
    
    def _generate_demo_analysis(self, video: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ –∞–Ω–∞–ª–∏–∑–∞
        """
        import random
        
        return {
            'ai_potential': round(random.uniform(0.6, 0.95), 2),
            'content_quality': round(random.uniform(0.7, 0.9), 2),
            'engagement_level': round(random.uniform(0.5, 0.85), 2),
            'uniqueness_potential': round(random.uniform(0.6, 0.9), 2),
            'recommendation': random.choice(['high', 'medium', 'low']),
            'analysis_notes': "–î–µ–º–æ –∞–Ω–∞–ª–∏–∑ - AI –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API",
            'analyzed_at': datetime.now().isoformat()
        }
    
    def generate_content_ideas(self, theme: str, count: int = 5) -> List[Dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã
        """
        logger.info(f"üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {count} –∏–¥–µ–π –¥–ª—è —Ç–µ–º—ã: {theme}")
        
        if not self.ai_available:
            return self._generate_demo_ideas(theme, count)
        
        try:
            prompt = f"""
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {count} –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏–¥–µ–π –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É "{theme}".
–ö–∞–∂–¥–∞—è –∏–¥–µ—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∏—Ä—É—Å–Ω–æ–π –∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–ª—è YouTube Shorts, TikTok –∏–ª–∏ Instagram Reels.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ JSON:
[
  {{
    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏",
    "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏",
    "hook": "–¶–µ–ø–ª—è—é—â–∏–π –∫—Ä—é—á–æ–∫ –¥–ª—è –∑—Ä–∏—Ç–µ–ª—è",
    "estimated_viral_potential": 0.8,
    "suggested_platform": "tiktok"
  }}
]
"""
            
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –≤–∏—Ä—É—Å–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=1000,
                temperature=0.7
            )
            
            ai_response = response.choices[0].message.content
            return self._parse_ideas_response(ai_response)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π: {e}")
            return self._generate_demo_ideas(theme, count)
    
    def _parse_ideas_response(self, response: str) -> List[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Å –∏–¥–µ—è–º–∏ –æ—Ç AI
        """
        try:
            start = response.find('[')
            end = response.rfind(']') + 1
            if start != -1 and end != 0:
                json_str = response[start:end]
                return json.loads(json_str)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–¥–µ–π: {e}")
        
        return self._generate_demo_ideas("–æ–±—â–∞—è —Ç–µ–º–∞", 3)
    
    def _generate_demo_ideas(self, theme: str, count: int) -> List[Dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ –∏–¥–µ–π
        """
        ideas = []
        for i in range(count):
            idea = {
                'title': f"–ò–¥–µ—è {i+1} –¥–ª—è {theme}",
                'description': f"–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É {theme}, –¥–µ–º–æ –≤–µ—Ä—Å–∏—è {i+1}",
                'hook': f"–ü—Ä–∏–≤–ª–µ–∫–∞—é—â–∏–π –∫—Ä—é—á–æ–∫ {i+1} –¥–ª—è —Ç–µ–º—ã {theme}",
                'estimated_viral_potential': round(0.6 + (i * 0.1), 1),
                'suggested_platform': ['youtube', 'tiktok', 'instagram'][i % 3],
                'generated_at': datetime.now().isoformat()
            }
            ideas.append(idea)
        
        return ideas