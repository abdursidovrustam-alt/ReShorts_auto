"""
–ó–∞–≥—Ä—É–∑—á–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ yt-dlp
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: YouTube, TikTok, Facebook, Twitter –∏ 1000+ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ Windows

–ê–≤—Ç–æ—Ä: MiniMax Agent  
–î–∞—Ç–∞: 2025-10-17
"""

import logging
import os
import time
from typing import Dict, Any
from pathlib import Path
from urllib.parse import urlparse
import json

logger = logging.getLogger(__name__)


class YTDLPDownloader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ yt-dlp"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.name = "yt-dlp"
        self.supported_platforms = ['youtube', 'tiktok', 'facebook', 'twitter', 'unknown']
        self.download_path = Path(config.get('download', {}).get('path', 'downloads'))
        self.timeout = config.get('download', {}).get('timeout', 120)
        self._init_ytdlp()
    
    def _init_ytdlp(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è yt-dlp"""
        try:
            import yt_dlp
            self.yt_dlp = yt_dlp
            logger.info("‚úÖ yt-dlp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except ImportError:
            logger.error("‚ùå yt-dlp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install yt-dlp")
            raise ImportError("yt-dlp –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def download(self, url: str, **kwargs) -> Dict[str, Any]:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ yt-dlp
        
        Args:
            url: URL –≤–∏–¥–µ–æ
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∞—á–∞–Ω–Ω–æ–º –≤–∏–¥–µ–æ
        """
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp
            download_config = self.config.get('download', {})
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            output_template = str(self.download_path / '%(title)s.%(ext)s')
            
            ydl_opts = {
                'format': self._get_format_string(download_config.get('video_quality', 'best')),
                'outtmpl': output_template,
                'quiet': True,
                'no_warnings': True,
                'extract_flat': False,
                'writethumbnail': download_config.get('thumbnail', True),
                'writesubtitles': download_config.get('subtitles', False),
                'writeinfojson': True,
                'socket_timeout': self.timeout,
                'retries': download_config.get('max_retries', 3),
                # Windows-specific –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                'windowsfilenames': True if os.name == 'nt' else False,
                'restrictfilenames': True,
            }
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∫—Å–∏
            proxy_config = download_config.get('proxy', {})
            if proxy_config.get('enabled') and proxy_config.get('url'):
                ydl_opts['proxy'] = proxy_config['url']
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            max_size = download_config.get('max_file_size', 100)  # MB
            if max_size > 0:
                ydl_opts['format'] += f'[filesize<{max_size}M]'
            
            logger.info(f"üîΩ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ yt-dlp: {url}")
            
            with self.yt_dlp.YoutubeDL(ydl_opts) as ydl:
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                info = ydl.extract_info(url, download=False)
                
                if not info:
                    return {
                        "success": False,
                        "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ"
                    }
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                duration = info.get('duration', 0)
                duration_max = self.config.get('search', {}).get('duration_max', 600)
                
                if duration > duration_max:
                    return {
                        "success": False,
                        "error": f"–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({duration}—Å > {duration_max}—Å)"
                    }
                
                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
                ydl.download([url])
                
                # –ü–æ–∏—Å–∫ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                title = self._sanitize_filename(info.get('title', 'video'))
                downloaded_file = self._find_downloaded_file(title)
                
                if not downloaded_file:
                    return {
                        "success": False,
                        "error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
                    }
                
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                result = {
                    "success": True,
                    "file_path": str(downloaded_file),
                    "file_size": downloaded_file.stat().st_size,
                    "title": info.get('title', ''),
                    "description": info.get('description', ''),
                    "duration": duration,
                    "view_count": info.get('view_count', 0),
                    "like_count": info.get('like_count', 0),
                    "uploader": info.get('uploader', ''),
                    "upload_date": info.get('upload_date', ''),
                    "url": url,
                    "thumbnail": info.get('thumbnail', ''),
                    "platform": self._detect_platform(url),
                    "downloader": self.name
                }
                
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {title}")
                return result
                
        except self.yt_dlp.DownloadError as e:
            error_msg = f"–û—à–∏–±–∫–∞ yt-dlp: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return {
                "success": False,
                "error": error_msg
            }
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return {
                "success": False,
                "error": error_msg
            }
    
    def get_info(self, url: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        
        Args:
            url: URL –≤–∏–¥–µ–æ
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ
        """
        try:
            ydl_opts = {
                'quiet': True,
                'no_warnings': True,
                'extract_flat': False,
                'socket_timeout': 30,
            }
            
            with self.yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                
                if not info:
                    return {
                        "success": False,
                        "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ"
                    }
                
                return {
                    "success": True,
                    "title": info.get('title', ''),
                    "description": info.get('description', ''),
                    "duration": info.get('duration', 0),
                    "view_count": info.get('view_count', 0),
                    "like_count": info.get('like_count', 0),
                    "dislike_count": info.get('dislike_count', 0),
                    "comment_count": info.get('comment_count', 0),
                    "uploader": info.get('uploader', ''),
                    "upload_date": info.get('upload_date', ''),
                    "thumbnail": info.get('thumbnail', ''),
                    "url": url,
                    "platform": self._detect_platform(url)
                }
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return {
                "success": False,
                "error": error_msg
            }
    
    def check_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ yt-dlp
            if not hasattr(self, 'yt_dlp'):
                return {
                    "available": False,
                    "error": "yt-dlp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
                }
            
            return {
                "available": True,
                "version": getattr(self.yt_dlp, 'version', 'unknown'),
                "error": None
            }
            
        except Exception as e:
            return {
                "available": False,
                "error": str(e)
            }
    
    def _get_format_string(self, quality: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è yt-dlp"""
        format_map = {
            'worst': 'worst',
            'best': 'best[height<=720]',
            'audio': 'bestaudio',
            '144p': 'worst[height<=144]',
            '240p': 'best[height<=240]',
            '360p': 'best[height<=360]',
            '480p': 'best[height<=480]',
            '720p': 'best[height<=720]',
            '1080p': 'best[height<=1080]'
        }
        
        return format_map.get(quality, 'best[height<=720]')
    
    def _detect_platform(self, url: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ URL"""
        url_lower = url.lower()
        
        if 'youtube.com' in url_lower or 'youtu.be' in url_lower:
            return 'youtube'
        elif 'tiktok.com' in url_lower:
            return 'tiktok'
        elif 'instagram.com' in url_lower:
            return 'instagram'
        elif 'facebook.com' in url_lower or 'fb.watch' in url_lower:
            return 'facebook'
        elif 'twitter.com' in url_lower or 'x.com' in url_lower:
            return 'twitter'
        else:
            return 'unknown'
    
    def _sanitize_filename(self, filename: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è Windows"""
        if not filename:
            return "video"
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Windows
        invalid_chars = '<>:"/\\|?*'
        for char in invalid_chars:
            filename = filename.replace(char, '_')
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –≤ –∫–æ–Ω—Ü–µ (–ø—Ä–æ–±–ª–µ–º–∞ Windows)
        filename = filename.rstrip('.')
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
        if len(filename) > 100:
            filename = filename[:100]
        
        return filename.strip() or "video"
    
    def _find_downloaded_file(self, title_hint: str) -> Path:
        """–ü–æ–∏—Å–∫ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            video_extensions = ['.mp4', '.webm', '.mkv', '.avi', '.mov', '.flv']
            
            # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫
            for file_path in self.download_path.iterdir():
                if file_path.is_file():
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                    if file_path.suffix.lower() in video_extensions:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
                        if title_hint.lower() in file_path.stem.lower():
                            return file_path
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–∞—á–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª
            video_files = [
                f for f in self.download_path.iterdir()
                if f.is_file() and f.suffix.lower() in video_extensions
            ]
            
            if video_files:
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
                video_files.sort(key=lambda x: x.stat().st_ctime, reverse=True)
                return video_files[0]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞: {e}")
        
        return None